// Based on /System/Library/Frameworks/Carbon.framework/Frameworks/CarbonSound.framework/Headers/Sound.h
function Sound_h(lib) {
    Components_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._SOUND_H)
        return;
    this._SOUND_H = true;

    this.soundListRsrc = 1936614432;
    this.kSoundCodecInfoResourceType = 1936615023;
    this.kSimpleBeepID = 1;
    this.rate48khz = -1149239296;
    this.rate44khz = -1404829696;
    this.rate32khz = 2097152000;
    this.rate22050hz = 1445068800;
    this.rate22khz = 1458473891;
    this.rate16khz = 1048576000;
    this.rate11khz = 729236945;
    this.rate11025hz = 722534400;
    this.rate8khz = 524288000;
    this.sampledSynth = 5;
    this.kMiddleC = 60;
    this.kNoVolume = 0;
    this.kFullVolume = 256;
    this.stdQLength = 128;
    this.dataOffsetFlag = 32768;
    this.kUseOptionalOutputDevice = -1;
    this.notCompressed = 0;
    this.fixedCompression = -1;
    this.variableCompression = -2;
    this.twoToOne = 1;
    this.eightToThree = 2;
    this.threeToOne = 3;
    this.sixToOne = 4;
    this.sixToOnePacketSize = 8;
    this.threeToOnePacketSize = 16;
    this.stateBlockSize = 64;
    this.leftOverBlockSize = 32;
    this.firstSoundFormat = 1;
    this.secondSoundFormat = 2;
    this.sysBeepDisable = 0;
    this.sysBeepEnable = 1;
    this.sysBeepSynchronous = 2;
    this.unitTypeNoSelection = 65535;
    this.unitTypeSeconds = 0;
    this.stdSH = 0;
    this.extSH = 255;
    this.cmpSH = 254;
    this.nullCmd = 0;
    this.quietCmd = 3;
    this.flushCmd = 4;
    this.reInitCmd = 5;
    this.waitCmd = 10;
    this.pauseCmd = 11;
    this.resumeCmd = 12;
    this.callBackCmd = 13;
    this.syncCmd = 14;
    this.availableCmd = 24;
    this.versionCmd = 25;
    this.volumeCmd = 46;
    this.getVolumeCmd = 47;
    this.clockComponentCmd = 50;
    this.getClockComponentCmd = 51;
    this.scheduledSoundCmd = 52;
    this.linkSoundComponentsCmd = 53;
    this.soundCmd = 80;
    this.bufferCmd = 81;
    this.rateMultiplierCmd = 86;
    this.getRateMultiplierCmd = 87;
    this.initChanLeft = 2;
    this.initChanRight = 3;
    this.initNoInterp = 4;
    this.initNoDrop = 8;
    this.initMono = 128;
    this.initStereo = 192;
    this.initMACE3 = 768;
    this.initMACE6 = 1024;
    this.initPanMask = 3;
    this.initSRateMask = 48;
    this.initStereoMask = 192;
    this.initCompMask = 65280;
    this.siActiveChannels = 1667785059;
    this.siActiveLevels = 1819107683;
    this.siAGCOnOff = 1634165536;
    this.siAsync = 1634957678;
    this.siAVDisplayBehavior = 1635148898;
    this.siChannelAvailable = 1667785078;
    this.siCompressionAvailable = 1668112758;
    this.siCompressionFactor = 1668114017;
    this.siCompressionHeader = 1668114532;
    this.siCompressionNames = 1668178285;
    this.siCompressionParams = 1702257015;
    this.siCompressionSampleRate = 1668313716;
    this.siCompressionChannels = 1668309876;
    this.siCompressionOutputSampleRate = 1668248180;
    this.siCompressionInputRateList = 1668445292;
    this.siCompressionType = 1668246896;
    this.siCompressionConfiguration = 1667458663;
    this.siContinuous = 1668247156;
    this.siDecompressionParams = 2002876005;
    this.siDecompressionConfiguration = 1684235879;
    this.siDeviceBufferInfo = 1684171118;
    this.siDeviceConnected = 1684238190;
    this.siDeviceIcon = 1768124270;
    this.siDeviceName = 1851878757;
    this.siEQSpectrumBands = 1701933922;
    this.siEQSpectrumLevels = 1701932150;
    this.siEQSpectrumOnOff = 1701932143;
    this.siEQSpectrumResolution = 1701933683;
    this.siEQToneControlGain = 1701934183;
    this.siEQToneControlOnOff = 1701934179;
    this.siHardwareBalance = 1751277932;
    this.siHardwareBalanceSteps = 1751280755;
    this.siHardwareBass = 1751277939;
    this.siHardwareBassSteps = 1751282548;
    this.siHardwareBusy = 1752654451;
    this.siHardwareFormat = 1752655469;
    this.siHardwareMute = 1752003956;
    this.siHardwareMuteNoPrefs = 1752002160;
    this.siHardwareTreble = 1752461922;
    this.siHardwareTrebleSteps = 1752659059;
    this.siHardwareVolume = 1752592236;
    this.siHardwareVolumeSteps = 1752396912;
    this.siHeadphoneMute = 1886221684;
    this.siHeadphoneVolume = 1886809964;
    this.siHeadphoneVolumeSteps = 1751413620;
    this.siInputAvailable = 1768841590;
    this.siInputGain = 1734437230;
    this.siInputSource = 1936684402;
    this.siInputSourceNames = 1936613741;
    this.siLevelMeterOnOff = 1819108724;
    this.siModemGain = 1835491689;
    this.siMonitorAvailable = 1835950454;
    this.siMonitorSource = 1836019315;
    this.siNumberChannels = 1667785070;
    this.siOptionsDialog = 1869640804;
    this.siOSTypeInputSource = 1768845428;
    this.siOSTypeInputAvailable = 1768841590;
    this.siOutputDeviceName = 1869504877;
    this.siPlayThruOnOff = 1886155880;
    this.siPostMixerSoundComponent = 1886612856;
    this.siPreMixerSoundComponent = 1886547320;
    this.siQuality = 1903518060;
    this.siRateMultiplier = 1919776108;
    this.siRecordingQuality = 1903518060;
    this.siSampleRate = 1936875892;
    this.siSampleRateAvailable = 1936875894;
    this.siSampleSize = 1936943482;
    this.siSampleSizeAvailable = 1936941430;
    this.siSetupCDAudio = 1937072996;
    this.siSetupModemAudio = 1937075556;
    this.siSlopeAndIntercept = 1718378864;
    this.siSoundClock = 1935895659;
    this.siUseThisSoundClock = 1935895651;
    this.siSpeakerMute = 1936553332;
    this.siSpeakerVolume = 1937141612;
    this.siSSpCPULoadLimit = 862219372;
    this.siSSpLocalization = 862218598;
    this.siSSpSpeakerSetup = 862221172;
    this.siStereoInputGain = 1936154985;
    this.siSubwooferMute = 1651340660;
    this.siTerminalType = 1953790320;
    this.siTwosComplementOnOff = 1953984371;
    this.siVendorProduct = 1987080815;
    this.siVolume = 1987013749;
    this.siVoxRecordInfo = 1987016818;
    this.siVoxStopInfo = 1987016819;
    this.siWideStereo = 2003395685;
    this.siSupportedExtendedFlags = 1702389356;
    this.siRateConverterRollOffSlope = 1919116386;
    this.siOutputLatency = 1869378661;
    this.siHALAudioDeviceID = 1751935332;
    this.siHALAudioDeviceUniqueID = 1752525156;
    this.siClientAcceptsVBR = 1668702834;
    this.siSourceIsExhausted = 1936876408;
    this.siMediaContextID = 1970628964;
    this.siCompressionMaxPacketSize = 1668118640;
    this.siAudioCodecPropertyValue = 1936750177;
    this.siAudioCodecPropertyInfo = 1936746862;
    this.siCloseDriver = 1668050803;
    this.siInitializeDriver = 1768843636;
    this.siPauseRecording = 1885435251;
    this.siUserInterruptProc = 1970496882;
    this.kInvalidSource = -1;
    this.kNoSource = 1852796517;
    this.kCDSource = 1667506208;
    this.kExtMicSource = 1701669219;
    this.kSoundInSource = 1936289386;
    this.kRCAInSource = 1769104225;
    this.kTVFMTunerSource = 1953916525;
    this.kDAVInSource = 1768186230;
    this.kIntMicSource = 1768778083;
    this.kMediaBaySource = 1835164025;
    this.kModemSource = 1836016749;
    this.kPCCardSource = 1885564192;
    this.kZoomVideoSource = 2054582371;
    this.kDVDSource = 1685480545;
    this.kMicrophoneArray = 1835623265;
    this.kNoSoundComponentType = 707406378;
    this.kSoundComponentType = 1936287348;
    this.kSoundComponentPPCType = 1852401268;
    this.kRate8SubType = 1918989410;
    this.kRate16SubType = 1918989431;
    this.kConverterSubType = 1668247158;
    this.kSndSourceSubType = 1936684402;
    this.kMixerType = 1835628658;
    this.kMixer8SubType = 1835628642;
    this.kMixer16SubType = 1835628663;
    this.kSoundInputDeviceType = 1936289392;
    this.kWaveInSubType = 2002876009;
    this.kWaveInSnifferSubType = 2003399534;
    this.kSoundOutputDeviceType = 1935959414;
    this.kClassicSubType = 1668047219;
    this.kASCSubType = 1634951968;
    this.kDSPSubType = 1685286944;
    this.kAwacsSubType = 1635213667;
    this.kGCAwacsSubType = 1635215203;
    this.kSingerSubType = 1936289383;
    this.kSinger2SubType = 1936615218;
    this.kWhitSubType = 2003331444;
    this.kSoundBlasterSubType = 1935830131;
    this.kWaveOutSubType = 2002876015;
    this.kWaveOutSnifferSubType = 2003792750;
    this.kDirectSoundSubType = 1685286500;
    this.kDirectSoundSnifferSubType = 1685287790;
    this.kUNIXsdevSubType = 1970155896;
    this.kUSBSubType = 1970496032;
    this.kBlueBoxSubType = 1651732068;
    this.kHALCustomComponentSubType = 1751215224;
    this.kSoundCompressor = 1935896429;
    this.kSoundDecompressor = 1935959395;
    this.kAudioComponentType = 1633970543;
    this.kAwacsPhoneSubType = 1752197230;
    this.kAudioVisionSpeakerSubType = 1952803939;
    this.kAudioVisionHeadphoneSubType = 1952803944;
    this.kPhilipsFaderSubType = 1953915254;
    this.kSGSToneSubType = 1936159536;
    this.kSoundEffectsType = 1936615032;
    this.kEqualizerSubType = 1701929324;
    this.kSSpLocalizationSubType = 1936614451;
    this.kSoundNotCompressed = 1313820229;
    this.k8BitOffsetBinaryFormat = 1918990112;
    this.k16BitBigEndianFormat = 1953984371;
    this.k16BitLittleEndianFormat = 1936684916;
    this.kFloat32Format = 1718367026;
    this.kFloat64Format = 1718367796;
    this.k24BitFormat = 1768829492;
    this.k32BitFormat = 1768829746;
    this.k32BitLittleEndianFormat = 842231401;
    this.kMACE3Compression = 1296122675;
    this.kMACE6Compression = 1296122678;
    this.kCDXA4Compression = 1667528756;
    this.kCDXA2Compression = 1667528754;
    this.kIMACompression = 1768775988;
    this.kULawCompression = 1970037111;
    this.kALawCompression = 1634492791;
    this.kMicrosoftADPCMFormat = 1836253186;
    this.kDVIIntelIMAFormat = 1836253201;
    this.kMicrosoftGSMCompression = 1836253233;
    this.kDVAudioFormat = 1685480289;
    this.kQDesignCompression = 1363430723;
    this.kQDesign2Compression = 1363430706;
    this.kQUALCOMMCompression = 1365470320;
    this.kOffsetBinary = 1918990112;
    this.kTwosComplement = 1953984371;
    this.kLittleEndianFormat = 1936684916;
    this.kMPEGLayer3Format = 1836253269;
    this.kFullMPEGLay3Format = 778924083;
    this.kVariableDurationDVAudioFormat = 1986295393;
    this.kMPEG4AudioFormat = 1836069985;
    this.k16BitNativeEndianFormat = 1936684916;
    this.k16BitNonNativeEndianFormat = 1953984371;
    this.k8BitRawIn = 1;
    this.k8BitTwosIn = 2;
    this.k16BitIn = 4;
    this.kStereoIn = 8;
    this.k8BitRawOut = 256;
    this.k8BitTwosOut = 512;
    this.k16BitOut = 1024;
    this.kStereoOut = 2048;
    this.kReverse = 65536;
    this.kRateConvert = 131072;
    this.kCreateSoundSource = 262144;
    this.kVMAwareness = 2097152;
    this.kHighQuality = 4194304;
    this.kNonRealTime = 8388608;
    this.kSoundCodecInfoFixedCompression = 1;
    this.kSoundCodecInfoVariableCompression = 2;
    this.kSoundCodecInfoHasRestrictedInputRates = 4;
    this.kSoundCodecInfoCanChangeOutputRate = 8;
    this.kSoundCodecInfoRequiresExternalFraming = 16;
    this.kSoundCodecInfoVariableDuration = 32;
    this.kSourcePaused = 1;
    this.kPassThrough = 65536;
    this.kNoSoundComponentChain = 131072;
    this.kNoMixing = 1;
    this.kNoSampleRateConversion = 2;
    this.kNoSampleSizeConversion = 4;
    this.kNoSampleFormatConversion = 8;
    this.kNoChannelConversion = 16;
    this.kNoDecompression = 32;
    this.kNoVolumeConversion = 64;
    this.kNoRealtimeProcessing = 128;
    this.kScheduledSource = 256;
    this.kNonInterleavedBuffer = 512;
    this.kNonPagingMixer = 1024;
    this.kSoundConverterMixer = 2048;
    this.kPagingMixer = 4096;
    this.kVMAwareMixer = 8192;
    this.kExtendedSoundData = 16384;
    this.kBestQuality = 1;
    this.kInputMask = 255;
    this.kOutputMask = 65280;
    this.kOutputShift = 8;
    this.kActionMask = 16711680;
    this.kSoundComponentBits = 16777215;
    this.kAudioFormatAtomType = 1718775137;
    this.kAudioEndianAtomType = 1701733473;
    this.kAudioVBRAtomType = 1986163297;
    this.kAudioTerminatorAtomType = 0;
    this.kAVDisplayHeadphoneRemove = 0;
    this.kAVDisplayHeadphoneInsert = 1;
    this.kAVDisplayPlainTalkRemove = 2;
    this.kAVDisplayPlainTalkInsert = 3;
    this.audioAllChannels = 0;
    this.audioLeftChannel = 1;
    this.audioRightChannel = 2;
    this.audioUnmuted = 0;
    this.audioMuted = 1;
    this.audioDoesMono = 1;
    this.audioDoesStereo = 2;
    this.audioDoesIndependentChannels = 4;
    this.siCDQuality = 1667506208;
    this.siBestQuality = 1650815860;
    this.siBetterQuality = 1650816114;
    this.siGoodQuality = 1735356260;
    this.siNoneQuality = 1852796517;
    this.siDeviceIsConnected = 1;
    this.siDeviceNotConnected = 0;
    this.siDontKnowIfConnected = -1;
    this.siReadPermission = 0;
    this.siWritePermission = 1;
    this.kSoundConverterDidntFillBuffer = 1;
    this.kSoundConverterHasLeftOverData = 2;
    this.kExtendedSoundSampleCountNotValid = 1;
    this.kExtendedSoundBufferSizeValid = 2;
    this.kExtendedSoundFrameSizesValid = 4;
    this.kExtendedSoundCommonFrameSizeValid = 8;
    this.kExtendedSoundExtensionsValid = 16;
    this.kExtendedSoundBufferFlagsValid = 32;
    this.kExtendedSoundBufferIsDiscontinuous = 1;
    this.kExtendedSoundBufferIsFirstBuffer = 2;
    this.SndCommand = new ctypes.StructType("SndCommand", [{cmd: ctypes.unsigned_short}, {param1: ctypes.short}, {param2: ctypes.long}]);
    this.SndChannelPtr = this.SndChannel.ptr;
    this.SndCallBackProcPtr = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [this.SndChannelPtr, this.SndCommand.ptr]).ptr;
    this.SndCallBackUPP = this.SndCallBackProcPtr;
    this.SndChannel = new ctypes.StructType("SndChannel", [{nextChan: this.SndChannelPtr}, {firstMod: this.Ptr}, {callBack: this.SndCallBackUPP}, {userInfo: ctypes.long}, {wait: ctypes.long}, {cmdInProgress: this.SndCommand}, {flags: ctypes.short}, {qLength: ctypes.short}, {qHead: ctypes.short}, {qTail: ctypes.short}, {queue: this.SndCommand.array(128)}]);
    // Dropping inline function 'NewSndCallBackUPP'.
    // Dropping inline function 'DisposeSndCallBackUPP'.
    // Dropping inline function 'InvokeSndCallBackUPP'.
    this.StateBlock = new ctypes.StructType("StateBlock", [{stateVar: ctypes.short.array(64)}]);
    this.StateBlockPtr = this.StateBlock.ptr;
    this.LeftOverBlock = new ctypes.StructType("LeftOverBlock", [{count: ctypes.unsigned_long}, {sampleArea: this.SInt8.array(32)}]);
    this.LeftOverBlockPtr = this.LeftOverBlock.ptr;
    this.ModRef = new ctypes.StructType("ModRef", [{modNumber: ctypes.unsigned_short}, {modInit: ctypes.long}]);
    this.SndListResource = new ctypes.StructType("SndListResource", [{format: ctypes.short}, {numModifiers: ctypes.short}, {modifierPart: this.ModRef.array(1)}, {numCommands: ctypes.short}, {commandPart: this.SndCommand.array(1)}, {dataPart: this.UInt8.array(1)}]);
    this.SndListPtr = this.SndListResource.ptr;
    this.SndListHandle = this.SndListResource.ptr.ptr;
    this.SndListHndl = this.SndListHandle;
    this.Snd2ListResource = new ctypes.StructType("Snd2ListResource", [{format: ctypes.short}, {refCount: ctypes.short}, {numCommands: ctypes.short}, {commandPart: this.SndCommand.array(1)}, {dataPart: this.UInt8.array(1)}]);
    this.Snd2ListPtr = this.Snd2ListResource.ptr;
    this.Snd2ListHandle = this.Snd2ListResource.ptr.ptr;
    this.Snd2ListHndl = this.Snd2ListHandle;
    this.SoundHeader = new ctypes.StructType("SoundHeader", [{samplePtr: this.Ptr}, {length: ctypes.unsigned_long}, {sampleRate: this.UnsignedFixed}, {loopStart: ctypes.unsigned_long}, {loopEnd: ctypes.unsigned_long}, {encode: this.UInt8}, {baseFrequency: this.UInt8}, {sampleArea: this.UInt8.array(1)}]);
    this.SoundHeaderPtr = this.SoundHeader.ptr;
    this.CmpSoundHeader = new ctypes.StructType("CmpSoundHeader", [{samplePtr: this.Ptr}, {numChannels: ctypes.unsigned_long}, {sampleRate: this.UnsignedFixed}, {loopStart: ctypes.unsigned_long}, {loopEnd: ctypes.unsigned_long}, {encode: this.UInt8}, {baseFrequency: this.UInt8}, {numFrames: ctypes.unsigned_long}, {AIFFSampleRate: this.extended80}, {markerChunk: this.Ptr}, {format: this.OSType}, {futureUse2: ctypes.unsigned_long}, {stateVars: this.StateBlockPtr}, {leftOverSamples: this.LeftOverBlockPtr}, {compressionID: ctypes.short}, {packetSize: ctypes.unsigned_short}, {snthID: ctypes.unsigned_short}, {sampleSize: ctypes.unsigned_short}, {sampleArea: this.UInt8.array(1)}]);
    this.CmpSoundHeaderPtr = this.CmpSoundHeader.ptr;
    this.ExtSoundHeader = new ctypes.StructType("ExtSoundHeader", [{samplePtr: this.Ptr}, {numChannels: ctypes.unsigned_long}, {sampleRate: this.UnsignedFixed}, {loopStart: ctypes.unsigned_long}, {loopEnd: ctypes.unsigned_long}, {encode: this.UInt8}, {baseFrequency: this.UInt8}, {numFrames: ctypes.unsigned_long}, {AIFFSampleRate: this.extended80}, {markerChunk: this.Ptr}, {instrumentChunks: this.Ptr}, {AESRecording: this.Ptr}, {sampleSize: ctypes.unsigned_short}, {futureUse1: ctypes.unsigned_short}, {futureUse2: ctypes.unsigned_long}, {futureUse3: ctypes.unsigned_long}, {futureUse4: ctypes.unsigned_long}, {sampleArea: this.UInt8.array(1)}]);
    this.ExtSoundHeaderPtr = this.ExtSoundHeader.ptr;
    this.SoundHeaderUnion = new ctypes.StructType("SoundHeaderUnion", [{stdHeader: this.SoundHeader}, {cmpHeader: this.CmpSoundHeader}, {extHeader: this.ExtSoundHeader}]);
    this.ConversionBlock = new ctypes.StructType("ConversionBlock", [{destination: ctypes.short}, {unused: ctypes.short}, {inputPtr: this.CmpSoundHeaderPtr}, {outputPtr: this.CmpSoundHeaderPtr}]);
    this.ConversionBlockPtr = this.ConversionBlock.ptr;
    this.kScheduledSoundDoScheduled = 1;
    this.kScheduledSoundDoCallBack = 2;
    this.kScheduledSoundExtendedHdr = 4;
    this.ScheduledSoundHeader = new ctypes.StructType("ScheduledSoundHeader", [{u: this.SoundHeaderUnion}, {flags: ctypes.long}, {reserved: ctypes.short}, {callBackParam1: ctypes.short}, {callBackParam2: ctypes.long}, {startTime: this.TimeRecord}]);
    this.ScheduledSoundHeaderPtr = this.ScheduledSoundHeader.ptr;
    this.ExtendedScheduledSoundHeader = new ctypes.StructType("ExtendedScheduledSoundHeader", [{u: this.SoundHeaderUnion}, {flags: ctypes.long}, {reserved: ctypes.short}, {callBackParam1: ctypes.short}, {callBackParam2: ctypes.long}, {startTime: this.TimeRecord}, {recordSize: ctypes.long}, {extendedFlags: ctypes.long}, {bufferSize: ctypes.long}, {frameCount: ctypes.long}, {frameSizesArray: ctypes.long.ptr}, {commonFrameSize: ctypes.long}, {extensionsPtr: ctypes.void_t.ptr}, {extensionsSize: ctypes.long}, {bufferFlags: ctypes.unsigned_long}, {bufferFlagsMask: ctypes.unsigned_long}]);
    this.ExtendedScheduledSoundHeaderPtr = this.ExtendedScheduledSoundHeader.ptr;
    this.SMStatus = new ctypes.StructType("SMStatus", [{smMaxCPULoad: ctypes.short}, {smNumChannels: ctypes.short}, {smCurCPULoad: ctypes.short}]);
    this.SMStatusPtr = this.SMStatus.ptr;
    this.SCStatus = new ctypes.StructType("SCStatus", [{scStartTime: this.UnsignedFixed}, {scEndTime: this.UnsignedFixed}, {scCurrentTime: this.UnsignedFixed}, {scChannelBusy: this.Boolean}, {scChannelDisposed: this.Boolean}, {scChannelPaused: this.Boolean}, {scUnused: this.Boolean}, {scChannelAttributes: ctypes.unsigned_long}, {scCPULoad: ctypes.long}]);
    this.SCStatusPtr = this.SCStatus.ptr;
    this.AudioSelection = new ctypes.StructType("AudioSelection", [{unitType: ctypes.long}, {selStart: this.UnsignedFixed}, {selEnd: this.UnsignedFixed}]);
    this.AudioSelectionPtr = this.AudioSelection.ptr;
    this.SoundInfoList = new ctypes.StructType("SoundInfoList", [{count: ctypes.short}, {infoHandle: this.Handle}]);
    this.SoundInfoListPtr = this.SoundInfoList.ptr;
    this.SoundComponentData = new ctypes.StructType("SoundComponentData", [{flags: ctypes.long}, {format: this.OSType}, {numChannels: ctypes.short}, {sampleSize: ctypes.short}, {sampleRate: this.UnsignedFixed}, {sampleCount: ctypes.long}, {buffer: this.Byte.ptr}, {reserved: ctypes.long}]);
    this.SoundComponentDataPtr = this.SoundComponentData.ptr;
    this.ExtendedSoundComponentData = new ctypes.StructType("ExtendedSoundComponentData", [{desc: this.SoundComponentData}, {recordSize: ctypes.long}, {extendedFlags: ctypes.long}, {bufferSize: ctypes.long}, {frameCount: ctypes.long}, {frameSizesArray: ctypes.long.ptr}, {commonFrameSize: ctypes.long}, {extensionsPtr: ctypes.void_t.ptr}, {extensionsSize: ctypes.long}, {bufferFlags: ctypes.unsigned_long}, {bufferFlagsMask: ctypes.unsigned_long}]);
    this.ExtendedSoundComponentDataPtr = this.ExtendedSoundComponentData.ptr;
    this.SoundParamBlockPtr = this.SoundParamBlock.ptr;
    this.SoundParamProcPtr = new ctypes.FunctionType(ctypes.default_abi, this.Boolean, [this.SoundParamBlockPtr.ptr]).ptr;
    this.SoundParamUPP = this.SoundParamProcPtr;
    this.SoundParamBlock = new ctypes.StructType("SoundParamBlock", [{recordSize: ctypes.long}, {desc: this.SoundComponentData}, {rateMultiplier: this.UnsignedFixed}, {leftVolume: ctypes.short}, {rightVolume: ctypes.short}, {quality: ctypes.long}, {filter: this.ComponentInstance}, {moreRtn: this.SoundParamUPP}, {completionRtn: this.SoundParamUPP}, {refCon: ctypes.long}, {result: ctypes.short}]);
    this.ExtendedSoundParamBlock = new ctypes.StructType("ExtendedSoundParamBlock", [{pb: this.SoundParamBlock}, {reserved: ctypes.short}, {extendedFlags: ctypes.long}, {bufferSize: ctypes.long}, {frameCount: ctypes.long}, {frameSizesArray: ctypes.long.ptr}, {commonFrameSize: ctypes.long}, {extensionsPtr: ctypes.void_t.ptr}, {extensionsSize: ctypes.long}, {bufferFlags: ctypes.unsigned_long}, {bufferFlagsMask: ctypes.unsigned_long}]);
    this.ExtendedSoundParamBlockPtr = this.ExtendedSoundParamBlock.ptr;
    this.CompressionInfo = new ctypes.StructType("CompressionInfo", [{recordSize: ctypes.long}, {format: this.OSType}, {compressionID: ctypes.short}, {samplesPerPacket: ctypes.unsigned_short}, {bytesPerPacket: ctypes.unsigned_short}, {bytesPerFrame: ctypes.unsigned_short}, {bytesPerSample: ctypes.unsigned_short}, {futureUse1: ctypes.unsigned_short}]);
    this.CompressionInfoPtr = this.CompressionInfo.ptr;
    this.CompressionInfoHandle = this.CompressionInfoPtr.ptr;
    this.SoundSlopeAndInterceptRecord = new ctypes.StructType("SoundSlopeAndInterceptRecord", [{slope: this.Float64}, {intercept: this.Float64}, {minClip: this.Float64}, {maxClip: this.Float64}]);
    this.SoundSlopeAndInterceptPtr = this.SoundSlopeAndInterceptRecord.ptr;
    this.OpaqueSoundConverter = new ctypes.StructType("OpaqueSoundConverter");
    this.SoundConverter = this.OpaqueSoundConverter.ptr;
    this.SoundConverterFillBufferDataProcPtr = new ctypes.FunctionType(ctypes.default_abi, this.Boolean, [this.SoundComponentDataPtr.ptr, ctypes.void_t.ptr]).ptr;
    this.SoundConverterFillBufferDataUPP = this.SoundConverterFillBufferDataProcPtr;
    this.OpaqueSoundSource = new ctypes.StructType("OpaqueSoundSource");
    this.SoundSource = this.OpaqueSoundSource.ptr;
    this.SoundSourcePtr = this.SoundSource.ptr;
    this.SoundComponentLink = new ctypes.StructType("SoundComponentLink", [{description: this.ComponentDescription}, {mixerID: this.SoundSource}, {linkID: this.SoundSource.ptr}]);
    this.SoundComponentLinkPtr = this.SoundComponentLink.ptr;
    this.AudioInfo = new ctypes.StructType("AudioInfo", [{capabilitiesFlags: ctypes.long}, {reserved: ctypes.long}, {numVolumeSteps: ctypes.unsigned_short}]);
    this.AudioInfoPtr = this.AudioInfo.ptr;
    this.AudioFormatAtom = new ctypes.StructType("AudioFormatAtom", [{size: ctypes.long}, {atomType: this.OSType}, {format: this.OSType}]);
    this.AudioFormatAtomPtr = this.AudioFormatAtom.ptr;
    this.AudioEndianAtom = new ctypes.StructType("AudioEndianAtom", [{size: ctypes.long}, {atomType: this.OSType}, {littleEndian: ctypes.short}]);
    this.AudioEndianAtomPtr = this.AudioEndianAtom.ptr;
    this.AudioTerminatorAtom = new ctypes.StructType("AudioTerminatorAtom", [{size: ctypes.long}, {atomType: this.OSType}]);
    this.AudioTerminatorAtomPtr = this.AudioTerminatorAtom.ptr;
    this.LevelMeterInfo = new ctypes.StructType("LevelMeterInfo", [{numChannels: ctypes.short}, {leftMeter: this.UInt8}, {rightMeter: this.UInt8}]);
    this.LevelMeterInfoPtr = this.LevelMeterInfo.ptr;
    this.EQSpectrumBandsRecord = new ctypes.StructType("EQSpectrumBandsRecord", [{count: ctypes.short}, {frequency: this.UnsignedFixedPtr}]);
    this.EQSpectrumBandsRecordPtr = this.EQSpectrumBandsRecord.ptr;
    this.kSoundAudioCodecPropertyWritableFlag = 1;
    this.SoundAudioCodecPropertyRequestParams = new ctypes.StructType("SoundAudioCodecPropertyRequestParams", [{propertyClass: this.UInt32}, {propertyID: this.UInt32}, {propertyDataSize: this.UInt32}, {propertyData: ctypes.void_t.ptr}, {propertyRequestFlags: this.UInt32}, {propertyDataType: this.UInt32}, {propertyRequestResult: this.ComponentResult}]);
    this.SPBPtr = this.SPB.ptr;
    this.SIInterruptProcPtr = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [this.SPBPtr, this.Ptr, ctypes.short, ctypes.long]).ptr;
    this.SICompletionProcPtr = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [this.SPBPtr]).ptr;
    this.SIInterruptUPP = this.SIInterruptProcPtr;
    this.SICompletionUPP = this.SICompletionProcPtr;
    this.SPB = new ctypes.StructType("SPB", [{inRefNum: ctypes.long}, {count: ctypes.unsigned_long}, {milliseconds: ctypes.unsigned_long}, {bufferLength: ctypes.unsigned_long}, {bufferPtr: this.Ptr}, {completionRoutine: this.SICompletionUPP}, {interruptRoutine: this.SIInterruptUPP}, {userLong: ctypes.long}, {error: this.OSErr}, {unused1: ctypes.long}]);
    // Dropping inline function 'NewSoundParamUPP'.
    // Dropping inline function 'NewSoundConverterFillBufferDataUPP'.
    // Dropping inline function 'NewSIInterruptUPP'.
    // Dropping inline function 'NewSICompletionUPP'.
    // Dropping inline function 'DisposeSoundParamUPP'.
    // Dropping inline function 'DisposeSoundConverterFillBufferDataUPP'.
    // Dropping inline function 'DisposeSIInterruptUPP'.
    // Dropping inline function 'DisposeSICompletionUPP'.
    // Dropping inline function 'InvokeSoundParamUPP'.
    // Dropping inline function 'InvokeSoundConverterFillBufferDataUPP'.
    // Dropping inline function 'InvokeSIInterruptUPP'.
    // Dropping inline function 'InvokeSICompletionUPP'.
    this.FilePlayCompletionProcPtr = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [this.SndChannelPtr]).ptr;
    this.FilePlayCompletionUPP = this.FilePlayCompletionProcPtr;
    this.kSoundComponentInitOutputDeviceSelect = 1;
    this.kSoundComponentSetSourceSelect = 2;
    this.kSoundComponentGetSourceSelect = 3;
    this.kSoundComponentGetSourceDataSelect = 4;
    this.kSoundComponentSetOutputSelect = 5;
    this.kSoundComponentAddSourceSelect = 257;
    this.kSoundComponentRemoveSourceSelect = 258;
    this.kSoundComponentGetInfoSelect = 259;
    this.kSoundComponentSetInfoSelect = 260;
    this.kSoundComponentStartSourceSelect = 261;
    this.kSoundComponentStopSourceSelect = 262;
    this.kSoundComponentPauseSourceSelect = 263;
    this.kSoundComponentPlaySourceBufferSelect = 264;
    this.kDelegatedSoundComponentSelectors = 256;
    this.SndInputCmpParamPtr = this.SndInputCmpParam.ptr;
    this.SICCompletionProcPtr = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [this.SndInputCmpParamPtr]).ptr;
    this.SndInputCmpParam = new ctypes.StructType("SndInputCmpParam", [{ioCompletion: this.SICCompletionProcPtr}, {ioInterrupt: this.SIInterruptProcPtr}, {ioResult: this.OSErr}, {pad: ctypes.short}, {ioReqCount: ctypes.unsigned_long}, {ioActCount: ctypes.unsigned_long}, {ioBuffer: this.Ptr}, {ioMisc: this.Ptr}]);
    this.kSndInputReadAsyncSelect = 1;
    this.kSndInputReadSyncSelect = 2;
    this.kSndInputPauseRecordingSelect = 3;
    this.kSndInputResumeRecordingSelect = 4;
    this.kSndInputStopRecordingSelect = 5;
    this.kSndInputGetStatusSelect = 6;
    this.kSndInputGetDeviceInfoSelect = 7;
    this.kSndInputSetDeviceInfoSelect = 8;
    this.kSndInputInitHardwareSelect = 9;
}

Components.utils.import("resource://gre/modules/ctypes.jsm");
Components.utils.import("resource://osxtypes/CarbonCore.jsm");
Components.utils.import("resource://osxtypes/MacTypes.jsm");

const EXPORTED_SYMBOLS = ["CarbonSound", "Sound_h"];

function CarbonSound() {
    let libpath = "/System/Library/Frameworks/CarbonSound.framework/CarbonSound";
    let lib = ctypes.open(libpath);
    this.close = function() {
        lib.close();
    };

    Sound_h.call(this, lib);
}
