// Based on /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSLayoutTypes.h
function ATSLayoutTypes_h(lib) {
    ATSTypes_h.call(this, lib);
    MacTypes_h.call(this, lib);
    SFNTLayoutTypes_h.call(this, lib);

    if (this._ATSLAYOUTTYPES_H)
        return;
    this._ATSLAYOUTTYPES_H = true;

    this.kATSUseGlyphAdvance = 2147483647;
    this.kATSUseLineHeight = 2147483647;
    this.kATSNoTracking = -2147483648;
    this.kATSUseCaretOrigins = 0;
    this.kATSUseDeviceOrigins = 1;
    this.kATSUseFractionalOrigins = 2;
    this.kATSUseOriginFlags = 3;
    this.ATSULayoutOperationSelector = this.UInt32;
    this.kATSULayoutOperationNone = 0;
    this.kATSULayoutOperationJustification = 1;
    this.kATSULayoutOperationMorph = 2;
    this.kATSULayoutOperationKerningAdjustment = 4;
    this.kATSULayoutOperationBaselineAdjustment = 8;
    this.kATSULayoutOperationTrackingAdjustment = 16;
    this.kATSULayoutOperationPostLayoutAdjustment = 32;
    this.kATSULayoutOperationAppleReserved = -64;
    this.ATSULayoutOperationCallbackStatus = this.UInt32;
    this.kATSULayoutOperationCallbackStatusHandled = 0;
    this.kATSULayoutOperationCallbackStatusContinue = 1;
    this.ATSLineLayoutOptions = this.UInt32;
    this.kATSLineNoLayoutOptions = 0;
    this.kATSLineIsDisplayOnly = 1;
    this.kATSLineHasNoHangers = 2;
    this.kATSLineHasNoOpticalAlignment = 4;
    this.kATSLineKeepSpacesOutOfMargin = 8;
    this.kATSLineNoSpecialJustification = 16;
    this.kATSLineLastNoJustification = 32;
    this.kATSLineFractDisable = 64;
    this.kATSLineImposeNoAngleForEnds = 128;
    this.kATSLineFillOutToWidth = 256;
    this.kATSLineTabAdjustEnabled = 512;
    this.kATSLineIgnoreFontLeading = 1024;
    this.kATSLineApplyAntiAliasing = 2048;
    this.kATSLineNoAntiAliasing = 4096;
    this.kATSLineDisableNegativeJustification = 8192;
    this.kATSLineDisableAutoAdjustDisplayPos = 16384;
    this.kATSLineUseQDRendering = 32768;
    this.kATSLineDisableAllJustification = 65536;
    this.kATSLineDisableAllGlyphMorphing = 131072;
    this.kATSLineDisableAllKerningAdjustments = 262144;
    this.kATSLineDisableAllBaselineAdjustments = 524288;
    this.kATSLineDisableAllTrackingAdjustments = 1048576;
    this.kATSLineDisableAllLayoutOperations = 2031616;
    this.kATSLineUseDeviceMetrics = 16777216;
    this.kATSLineBreakToNearestCharacter = 33554432;
    this.kATSLineAppleReserved = -52428800;
    this.ATSStyleRenderingOptions = this.UInt32;
    this.kATSStyleNoOptions = 0;
    this.kATSStyleNoHinting = 1;
    this.kATSStyleApplyAntiAliasing = 2;
    this.kATSStyleNoAntiAliasing = 4;
    this.kATSStyleAppleReserved = -8;
    this.kATSStyleApplyHints = 0;
    this.ATSGlyphInfoFlags = this.UInt32;
    this.kATSGlyphInfoAppleReserved = 536608744;
    this.kATSGlyphInfoIsAttachment = -2147483648;
    this.kATSGlyphInfoIsLTHanger = 1073741824;
    this.kATSGlyphInfoIsRBHanger = 536870912;
    this.kATSGlyphInfoTerminatorGlyph = 524288;
    this.kATSGlyphInfoIsWhiteSpace = 262144;
    this.kATSGlyphInfoHasImposedWidth = 16;
    this.kATSGlyphInfoByteSizeMask = 7;
    this.ATSLayoutRecord = new ctypes.StructType("ATSLayoutRecord", [{glyphID: this.ATSGlyphRef}, {flags: this.ATSGlyphInfoFlags}, {originalOffset: this.ByteCount}, {realPos: this.Fixed}]);
    this.ATSTrapezoid = new ctypes.StructType("ATSTrapezoid", [{upperLeft: this.FixedPoint}, {upperRight: this.FixedPoint}, {lowerRight: this.FixedPoint}, {lowerLeft: this.FixedPoint}]);
    this.ATSJustWidthDeltaEntryOverride = new ctypes.StructType("ATSJustWidthDeltaEntryOverride", [{beforeGrowLimit: this.Fixed}, {beforeShrinkLimit: this.Fixed}, {afterGrowLimit: this.Fixed}, {afterShrinkLimit: this.Fixed}, {growFlags: this.JustificationFlags}, {shrinkFlags: this.JustificationFlags}]);
    this.ATSJustPriorityWidthDeltaOverrides = this.ATSJustWidthDeltaEntryOverride.array(4);
    this.ATSGlyphVector = new ctypes.StructType("ATSGlyphVector");
    this.ATSULineRef = this.ATSGlyphVector.ptr;
    this.ATSUDirectLayoutOperationOverrideProcPtr = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [this.ATSULayoutOperationSelector, this.ATSULineRef, this.URefCon, ctypes.void_t.ptr, this.ATSULayoutOperationCallbackStatus.ptr]).ptr;
    this.ATSUDirectLayoutOperationOverrideUPP = this.ATSUDirectLayoutOperationOverrideProcPtr;
    // Dropping inline function 'NewATSUDirectLayoutOperationOverrideUPP'.
    // Dropping inline function 'DisposeATSUDirectLayoutOperationOverrideUPP'.
    // Dropping inline function 'InvokeATSUDirectLayoutOperationOverrideUPP'.
    this.ATSULayoutOperationOverrideSpecifier = new ctypes.StructType("ATSULayoutOperationOverrideSpecifier", [{operationSelector: this.ATSULayoutOperationSelector}, {overrideUPP: this.ATSUDirectLayoutOperationOverrideUPP}]);
}

// Based on /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSFont.h
function ATSFont_h(lib) {
    ATSTypes_h.call(this, lib);
    CFBase_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._ATSFONT_H)
        return;
    this._ATSFONT_H = true;

    this.kATSOptionFlagsDefault = 0;
    this.kATSOptionFlagsComposeFontPostScriptName = 1;
    this.kATSOptionFlagsUseDataForkAsResourceFork = 256;
    this.kATSOptionFlagsUseResourceFork = 512;
    this.kATSOptionFlagsUseDataFork = 768;
    this.kATSIterationCompleted = -980;
    this.kATSInvalidFontFamilyAccess = -981;
    this.kATSInvalidFontAccess = -982;
    this.kATSIterationScopeModified = -983;
    this.kATSInvalidFontTableAccess = -984;
    this.kATSInvalidFontContainerAccess = -985;
    this.kATSInvalidGlyphAccess = -986;
    this.ATSFontContext = this.UInt32;
    this.kATSFontContextUnspecified = 0;
    this.kATSFontContextGlobal = 1;
    this.kATSFontContextLocal = 2;
    this.kATSOptionFlagsActivateDisabled = 32;
    this.kATSOptionFlagsProcessSubdirectories = 64;
    this.kATSOptionFlagsDoNotNotify = 128;
    this.kATSOptionFlagsRecordPersistently = 262144;
    this.kATSOptionFlagsIterateByPrecedenceMask = 32;
    this.kATSOptionFlagsIncludeDisabledMask = 128;
    this.kATSOptionFlagsIterationScopeMask = 28672;
    this.kATSOptionFlagsDefaultScope = 0;
    this.kATSOptionFlagsUnRestrictedScope = 4096;
    this.kATSOptionFlagsRestrictedScope = 8192;
    this.ATSFontFamilyApplierFunction = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [this.ATSFontFamilyRef, ctypes.void_t.ptr]).ptr;
    this.ATSFontApplierFunction = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [this.ATSFontRef, ctypes.void_t.ptr]).ptr;
    this.ATSFontFamilyIterator_ = new ctypes.StructType("ATSFontFamilyIterator_");
    this.ATSFontFamilyIterator = this.ATSFontFamilyIterator_.ptr;
    this.ATSFontIterator_ = new ctypes.StructType("ATSFontIterator_");
    this.ATSFontIterator = this.ATSFontIterator_.ptr;
    this.kATSFontFilterCurrentVersion = 0;
    this.kATSFontFilterSelectorUnspecified = 0;
    this.kATSFontFilterSelectorGeneration = 3;
    this.kATSFontFilterSelectorFontFamily = 7;
    this.kATSFontFilterSelectorFontFamilyApplierFunction = 8;
    this.kATSFontFilterSelectorFontApplierFunction = 9;
    this.kATSFileReferenceFilterSelector = 10;
    this.ATSFontFilter = new ctypes.StructType("ATSFontFilter", []);
    this.ATSFontNotificationRef_ = new ctypes.StructType("ATSFontNotificationRef_");
    this.ATSFontNotificationRef = this.ATSFontNotificationRef_.ptr;
    this.ATSFontNotificationInfoRef_ = new ctypes.StructType("ATSFontNotificationInfoRef_");
    this.ATSFontNotificationInfoRef = this.ATSFontNotificationInfoRef_.ptr;
    this.kATSFontNotifyOptionDefault = 0;
    this.kATSFontNotifyOptionReceiveWhileSuspended = 1;
    this.kATSFontNotifyActionFontsChanged = 1;
    this.kATSFontNotifyActionDirectoriesChanged = 2;
    this.ATSNotificationCallback = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [this.ATSFontNotificationInfoRef, ctypes.void_t.ptr]).ptr;
    this.ATSFontQuerySourceContext = new ctypes.StructType("ATSFontQuerySourceContext", [{version: this.UInt32}, {refCon: ctypes.void_t.ptr}, {retain: this.CFAllocatorRetainCallBack}, {release: this.CFAllocatorReleaseCallBack}]);
    this.kATSQueryActivateFontMessage = 1635021665;
    this.ATSFontQueryCallback = new ctypes.FunctionType(ctypes.default_abi, this.CFPropertyListRef, [this.ATSFontQueryMessageID, this.CFPropertyListRef, ctypes.void_t.ptr]).ptr;
    this.kATSFontAutoActivationDefault = 0;
    this.kATSFontAutoActivationDisabled = 1;
    this.kATSFontAutoActivationEnabled = 2;
    this.kATSFontAutoActivationAsk = 4;
    this.ATSFontAutoActivationSetting = this.UInt32;
}

// Based on /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/SFNTLayoutTypes.h
function SFNTLayoutTypes_h(lib) {
    MacTypes_h.call(this, lib);

    if (this._SFNTLAYOUTTYPES_H)
        return;
    this._SFNTLAYOUTTYPES_H = true;

    this.kAllTypographicFeaturesType = 0;
    this.kLigaturesType = 1;
    this.kCursiveConnectionType = 2;
    this.kLetterCaseType = 3;
    this.kVerticalSubstitutionType = 4;
    this.kLinguisticRearrangementType = 5;
    this.kNumberSpacingType = 6;
    this.kSmartSwashType = 8;
    this.kDiacriticsType = 9;
    this.kVerticalPositionType = 10;
    this.kFractionsType = 11;
    this.kOverlappingCharactersType = 13;
    this.kTypographicExtrasType = 14;
    this.kMathematicalExtrasType = 15;
    this.kOrnamentSetsType = 16;
    this.kCharacterAlternativesType = 17;
    this.kDesignComplexityType = 18;
    this.kStyleOptionsType = 19;
    this.kCharacterShapeType = 20;
    this.kNumberCaseType = 21;
    this.kTextSpacingType = 22;
    this.kTransliterationType = 23;
    this.kAnnotationType = 24;
    this.kKanaSpacingType = 25;
    this.kIdeographicSpacingType = 26;
    this.kUnicodeDecompositionType = 27;
    this.kRubyKanaType = 28;
    this.kCJKSymbolAlternativesType = 29;
    this.kIdeographicAlternativesType = 30;
    this.kCJKVerticalRomanPlacementType = 31;
    this.kItalicCJKRomanType = 32;
    this.kCJKRomanSpacingType = 103;
    this.kLastFeatureType = -1;
    this.kAllTypeFeaturesOnSelector = 0;
    this.kAllTypeFeaturesOffSelector = 1;
    this.kRequiredLigaturesOnSelector = 0;
    this.kRequiredLigaturesOffSelector = 1;
    this.kCommonLigaturesOnSelector = 2;
    this.kCommonLigaturesOffSelector = 3;
    this.kRareLigaturesOnSelector = 4;
    this.kRareLigaturesOffSelector = 5;
    this.kLogosOnSelector = 6;
    this.kLogosOffSelector = 7;
    this.kRebusPicturesOnSelector = 8;
    this.kRebusPicturesOffSelector = 9;
    this.kDiphthongLigaturesOnSelector = 10;
    this.kDiphthongLigaturesOffSelector = 11;
    this.kSquaredLigaturesOnSelector = 12;
    this.kSquaredLigaturesOffSelector = 13;
    this.kAbbrevSquaredLigaturesOnSelector = 14;
    this.kAbbrevSquaredLigaturesOffSelector = 15;
    this.kSymbolLigaturesOnSelector = 16;
    this.kSymbolLigaturesOffSelector = 17;
    this.kUnconnectedSelector = 0;
    this.kPartiallyConnectedSelector = 1;
    this.kCursiveSelector = 2;
    this.kUpperAndLowerCaseSelector = 0;
    this.kAllCapsSelector = 1;
    this.kAllLowerCaseSelector = 2;
    this.kSmallCapsSelector = 3;
    this.kInitialCapsSelector = 4;
    this.kInitialCapsAndSmallCapsSelector = 5;
    this.kSubstituteVerticalFormsOnSelector = 0;
    this.kSubstituteVerticalFormsOffSelector = 1;
    this.kLinguisticRearrangementOnSelector = 0;
    this.kLinguisticRearrangementOffSelector = 1;
    this.kMonospacedNumbersSelector = 0;
    this.kProportionalNumbersSelector = 1;
    this.kThirdWidthNumbersSelector = 2;
    this.kQuarterWidthNumbersSelector = 3;
    this.kWordInitialSwashesOnSelector = 0;
    this.kWordInitialSwashesOffSelector = 1;
    this.kWordFinalSwashesOnSelector = 2;
    this.kWordFinalSwashesOffSelector = 3;
    this.kLineInitialSwashesOnSelector = 4;
    this.kLineInitialSwashesOffSelector = 5;
    this.kLineFinalSwashesOnSelector = 6;
    this.kLineFinalSwashesOffSelector = 7;
    this.kNonFinalSwashesOnSelector = 8;
    this.kNonFinalSwashesOffSelector = 9;
    this.kShowDiacriticsSelector = 0;
    this.kHideDiacriticsSelector = 1;
    this.kDecomposeDiacriticsSelector = 2;
    this.kNormalPositionSelector = 0;
    this.kSuperiorsSelector = 1;
    this.kInferiorsSelector = 2;
    this.kOrdinalsSelector = 3;
    this.kNoFractionsSelector = 0;
    this.kVerticalFractionsSelector = 1;
    this.kDiagonalFractionsSelector = 2;
    this.kPreventOverlapOnSelector = 0;
    this.kPreventOverlapOffSelector = 1;
    this.kHyphensToEmDashOnSelector = 0;
    this.kHyphensToEmDashOffSelector = 1;
    this.kHyphenToEnDashOnSelector = 2;
    this.kHyphenToEnDashOffSelector = 3;
    this.kSlashedZeroOnSelector = 4;
    this.kSlashedZeroOffSelector = 5;
    this.kFormInterrobangOnSelector = 6;
    this.kFormInterrobangOffSelector = 7;
    this.kSmartQuotesOnSelector = 8;
    this.kSmartQuotesOffSelector = 9;
    this.kPeriodsToEllipsisOnSelector = 10;
    this.kPeriodsToEllipsisOffSelector = 11;
    this.kHyphenToMinusOnSelector = 0;
    this.kHyphenToMinusOffSelector = 1;
    this.kAsteriskToMultiplyOnSelector = 2;
    this.kAsteriskToMultiplyOffSelector = 3;
    this.kSlashToDivideOnSelector = 4;
    this.kSlashToDivideOffSelector = 5;
    this.kInequalityLigaturesOnSelector = 6;
    this.kInequalityLigaturesOffSelector = 7;
    this.kExponentsOnSelector = 8;
    this.kExponentsOffSelector = 9;
    this.kNoOrnamentsSelector = 0;
    this.kDingbatsSelector = 1;
    this.kPiCharactersSelector = 2;
    this.kFleuronsSelector = 3;
    this.kDecorativeBordersSelector = 4;
    this.kInternationalSymbolsSelector = 5;
    this.kMathSymbolsSelector = 6;
    this.kNoAlternatesSelector = 0;
    this.kDesignLevel1Selector = 0;
    this.kDesignLevel2Selector = 1;
    this.kDesignLevel3Selector = 2;
    this.kDesignLevel4Selector = 3;
    this.kDesignLevel5Selector = 4;
    this.kNoStyleOptionsSelector = 0;
    this.kDisplayTextSelector = 1;
    this.kEngravedTextSelector = 2;
    this.kIlluminatedCapsSelector = 3;
    this.kTitlingCapsSelector = 4;
    this.kTallCapsSelector = 5;
    this.kTraditionalCharactersSelector = 0;
    this.kSimplifiedCharactersSelector = 1;
    this.kJIS1978CharactersSelector = 2;
    this.kJIS1983CharactersSelector = 3;
    this.kJIS1990CharactersSelector = 4;
    this.kTraditionalAltOneSelector = 5;
    this.kTraditionalAltTwoSelector = 6;
    this.kTraditionalAltThreeSelector = 7;
    this.kTraditionalAltFourSelector = 8;
    this.kTraditionalAltFiveSelector = 9;
    this.kExpertCharactersSelector = 10;
    this.kLowerCaseNumbersSelector = 0;
    this.kUpperCaseNumbersSelector = 1;
    this.kProportionalTextSelector = 0;
    this.kMonospacedTextSelector = 1;
    this.kHalfWidthTextSelector = 2;
    this.kNoTransliterationSelector = 0;
    this.kHanjaToHangulSelector = 1;
    this.kHiraganaToKatakanaSelector = 2;
    this.kKatakanaToHiraganaSelector = 3;
    this.kKanaToRomanizationSelector = 4;
    this.kRomanizationToHiraganaSelector = 5;
    this.kRomanizationToKatakanaSelector = 6;
    this.kHanjaToHangulAltOneSelector = 7;
    this.kHanjaToHangulAltTwoSelector = 8;
    this.kHanjaToHangulAltThreeSelector = 9;
    this.kNoAnnotationSelector = 0;
    this.kBoxAnnotationSelector = 1;
    this.kRoundedBoxAnnotationSelector = 2;
    this.kCircleAnnotationSelector = 3;
    this.kInvertedCircleAnnotationSelector = 4;
    this.kParenthesisAnnotationSelector = 5;
    this.kPeriodAnnotationSelector = 6;
    this.kRomanNumeralAnnotationSelector = 7;
    this.kDiamondAnnotationSelector = 8;
    this.kInvertedBoxAnnotationSelector = 9;
    this.kInvertedRoundedBoxAnnotationSelector = 10;
    this.kFullWidthKanaSelector = 0;
    this.kProportionalKanaSelector = 1;
    this.kFullWidthIdeographsSelector = 0;
    this.kProportionalIdeographsSelector = 1;
    this.kHalfWidthIdeographsSelector = 2;
    this.kCanonicalCompositionOnSelector = 0;
    this.kCanonicalCompositionOffSelector = 1;
    this.kCompatibilityCompositionOnSelector = 2;
    this.kCompatibilityCompositionOffSelector = 3;
    this.kTranscodingCompositionOnSelector = 4;
    this.kTranscodingCompositionOffSelector = 5;
    this.kNoRubyKanaSelector = 0;
    this.kRubyKanaSelector = 1;
    this.kRubyKanaOnSelector = 2;
    this.kRubyKanaOffSelector = 3;
    this.kNoCJKSymbolAlternativesSelector = 0;
    this.kCJKSymbolAltOneSelector = 1;
    this.kCJKSymbolAltTwoSelector = 2;
    this.kCJKSymbolAltThreeSelector = 3;
    this.kCJKSymbolAltFourSelector = 4;
    this.kCJKSymbolAltFiveSelector = 5;
    this.kNoIdeographicAlternativesSelector = 0;
    this.kIdeographicAltOneSelector = 1;
    this.kIdeographicAltTwoSelector = 2;
    this.kIdeographicAltThreeSelector = 3;
    this.kIdeographicAltFourSelector = 4;
    this.kIdeographicAltFiveSelector = 5;
    this.kCJKVerticalRomanCenteredSelector = 0;
    this.kCJKVerticalRomanHBaselineSelector = 1;
    this.kNoCJKItalicRomanSelector = 0;
    this.kCJKItalicRomanSelector = 1;
    this.kCJKItalicRomanOnSelector = 2;
    this.kCJKItalicRomanOffSelector = 3;
    this.kHalfWidthCJKRomanSelector = 0;
    this.kProportionalCJKRomanSelector = 1;
    this.kDefaultCJKRomanSelector = 2;
    this.kFullWidthCJKRomanSelector = 3;
    this.kSFNTLookupSimpleArray = 0;
    this.kSFNTLookupSegmentSingle = 2;
    this.kSFNTLookupSegmentArray = 4;
    this.kSFNTLookupSingleTable = 6;
    this.kSFNTLookupTrimmedArray = 8;
    this.SFNTLookupTableFormat = this.UInt16;
    this.SFNTLookupValue = this.UInt16;
    this.SFNTLookupOffset = this.UInt16;
    this.SFNTLookupKind = this.UInt32;
    this.SFNTLookupBinarySearchHeader = new ctypes.StructType("SFNTLookupBinarySearchHeader", [{unitSize: this.UInt16}, {nUnits: this.UInt16}, {searchRange: this.UInt16}, {entrySelector: this.UInt16}, {rangeShift: this.UInt16}]);
    this.SFNTLookupArrayHeader = new ctypes.StructType("SFNTLookupArrayHeader", [{lookupValues: this.SFNTLookupValue.array(1)}]);
    this.SFNTLookupTrimmedArrayHeader = new ctypes.StructType("SFNTLookupTrimmedArrayHeader", [{firstGlyph: this.UInt16}, {count: this.UInt16}, {valueArray: this.SFNTLookupValue.array(1)}]);
    this.SFNTLookupSegment = new ctypes.StructType("SFNTLookupSegment", [{lastGlyph: this.UInt16}, {firstGlyph: this.UInt16}, {value: this.UInt16.array(1)}]);
    this.SFNTLookupSegmentHeader = new ctypes.StructType("SFNTLookupSegmentHeader", [{binSearch: this.SFNTLookupBinarySearchHeader}, {segments: this.SFNTLookupSegment.array(1)}]);
    this.SFNTLookupSingle = new ctypes.StructType("SFNTLookupSingle", [{glyph: this.UInt16}, {value: this.UInt16.array(1)}]);
    this.SFNTLookupSingleHeader = new ctypes.StructType("SFNTLookupSingleHeader", [{binSearch: this.SFNTLookupBinarySearchHeader}, {entries: this.SFNTLookupSingle.array(1)}]);
    this.SFNTLookupFormatSpecificHeader = new ctypes.StructType("SFNTLookupFormatSpecificHeader", [{theArray: this.SFNTLookupArrayHeader}, {segment: this.SFNTLookupSegmentHeader}, {single: this.SFNTLookupSingleHeader}, {trimmedArray: this.SFNTLookupTrimmedArrayHeader}]);
    this.SFNTLookupTable = new ctypes.StructType("SFNTLookupTable", [{format: this.SFNTLookupTableFormat}, {fsHeader: this.SFNTLookupFormatSpecificHeader}]);
    this.SFNTLookupTablePtr = this.SFNTLookupTable.ptr;
    this.SFNTLookupTableHandle = this.SFNTLookupTablePtr.ptr;
    this.kSTClassEndOfText = 0;
    this.kSTClassOutOfBounds = 1;
    this.kSTClassDeletedGlyph = 2;
    this.kSTClassEndOfLine = 3;
    this.kSTSetMark = 32768;
    this.kSTNoAdvance = 16384;
    this.kSTMarkEnd = 8192;
    this.kSTLigActionMask = 16383;
    this.kSTRearrVerbMask = 15;
    this.STClass = this.UInt8;
    this.STEntryIndex = this.UInt8;
    this.STHeader = new ctypes.StructType("STHeader", [{filler: this.UInt8}, {nClasses: this.STClass}, {classTableOffset: this.UInt16}, {stateArrayOffset: this.UInt16}, {entryTableOffset: this.UInt16}]);
    this.STClassTable = new ctypes.StructType("STClassTable", [{firstGlyph: this.UInt16}, {nGlyphs: this.UInt16}, {classes: this.STClass.array(1)}]);
    this.STEntryZero = new ctypes.StructType("STEntryZero", [{newState: this.UInt16}, {flags: this.UInt16}]);
    this.STEntryOne = new ctypes.StructType("STEntryOne", [{newState: this.UInt16}, {flags: this.UInt16}, {offset1: this.UInt16}]);
    this.STEntryTwo = new ctypes.StructType("STEntryTwo", [{newState: this.UInt16}, {flags: this.UInt16}, {offset1: this.UInt16}, {offset2: this.UInt16}]);
    this.kSTXHasLigAction = 8192;
    this.STXClass = this.UInt16;
    this.STXStateIndex = this.UInt16;
    this.STXEntryIndex = this.UInt16;
    this.STXHeader = new ctypes.StructType("STXHeader", [{nClasses: this.UInt32}, {classTableOffset: this.UInt32}, {stateArrayOffset: this.UInt32}, {entryTableOffset: this.UInt32}]);
    this.STXClassTable = this.SFNTLookupTable;
    this.STXEntryZero = new ctypes.StructType("STXEntryZero", [{newState: this.STXStateIndex}, {flags: this.UInt16}]);
    this.STXEntryOne = new ctypes.StructType("STXEntryOne", [{newState: this.STXStateIndex}, {flags: this.UInt16}, {index1: this.UInt16}]);
    this.STXEntryTwo = new ctypes.StructType("STXEntryTwo", [{newState: this.STXStateIndex}, {flags: this.UInt16}, {index1: this.UInt16}, {index2: this.UInt16}]);
    this.kLCARTag = 1818452338;
    this.kLCARCurrentVersion = 65536;
    this.kLCARLinearFormat = 0;
    this.kLCARCtlPointFormat = 1;
    this.LcarCaretClassEntry = new ctypes.StructType("LcarCaretClassEntry", [{count: this.UInt16}, {partials: this.UInt16.array(1)}]);
    this.LcarCaretTable = new ctypes.StructType("LcarCaretTable", [{version: this.Fixed}, {format: this.UInt16}, {lookup: this.SFNTLookupTable}]);
    this.LcarCaretTablePtr = this.LcarCaretTable.ptr;
    this.kJUSTTag = 1786082164;
    this.kJUSTCurrentVersion = 65536;
    this.kJUSTStandardFormat = 0;
    this.kJUSTnoGlyphcode = 65535;
    this.kJUSTpcDecompositionAction = 0;
    this.kJUSTpcUnconditionalAddAction = 1;
    this.kJUSTpcConditionalAddAction = 2;
    this.kJUSTpcGlyphStretchAction = 3;
    this.kJUSTpcDuctilityAction = 4;
    this.kJUSTpcGlyphRepeatAddAction = 5;
    this.kJUSTKashidaPriority = 0;
    this.kJUSTSpacePriority = 1;
    this.kJUSTLetterPriority = 2;
    this.kJUSTNullPriority = 3;
    this.kJUSTPriorityCount = 4;
    this.kJUSTOverridePriority = 32768;
    this.kJUSTOverrideLimits = 16384;
    this.kJUSTOverrideUnlimited = 8192;
    this.kJUSTUnlimited = 4096;
    this.kJUSTPriorityMask = 3;
    this.JustPCActionType = this.UInt16;
    this.JustificationFlags = this.UInt16;
    this.JustPCDecompositionAction = new ctypes.StructType("JustPCDecompositionAction", [{lowerLimit: this.Fixed}, {upperLimit: this.Fixed}, {order: this.UInt16}, {count: this.UInt16}, {glyphs: this.UInt16.array(1)}]);
    this.JustPCUnconditionalAddAction = this.UInt16;
    this.JustPCConditionalAddAction = new ctypes.StructType("JustPCConditionalAddAction", [{substThreshhold: this.Fixed}, {addGlyph: this.UInt16}, {substGlyph: this.UInt16}]);
    this.JustPCDuctilityAction = new ctypes.StructType("JustPCDuctilityAction", [{ductilityAxis: this.UInt32}, {minimumLimit: this.Fixed}, {noStretchValue: this.Fixed}, {maximumLimit: this.Fixed}]);
    this.JustPCGlyphRepeatAddAction = new ctypes.StructType("JustPCGlyphRepeatAddAction", [{flags: this.UInt16}, {glyph: this.UInt16}]);
    this.JustPCActionSubrecord = new ctypes.StructType("JustPCActionSubrecord", [{theClass: this.UInt16}, {theType: this.JustPCActionType}, {length: this.UInt32}, {data: this.UInt32}]);
    this.JustPCAction = new ctypes.StructType("JustPCAction", [{actionCount: this.UInt32}, {actions: this.JustPCActionSubrecord.array(1)}]);
    this.JustWidthDeltaEntry = new ctypes.StructType("JustWidthDeltaEntry", [{justClass: this.UInt32}, {beforeGrowLimit: this.Fixed}, {beforeShrinkLimit: this.Fixed}, {afterGrowLimit: this.Fixed}, {afterShrinkLimit: this.Fixed}, {growFlags: this.JustificationFlags}, {shrinkFlags: this.JustificationFlags}]);
    this.JustWidthDeltaGroup = new ctypes.StructType("JustWidthDeltaGroup", [{count: this.UInt32}, {entries: this.JustWidthDeltaEntry.array(1)}]);
    this.JustPostcompTable = new ctypes.StructType("JustPostcompTable", [{lookupTable: this.SFNTLookupTable}]);
    this.JustDirectionTable = new ctypes.StructType("JustDirectionTable", [{justClass: this.UInt16}, {widthDeltaClusters: this.UInt16}, {postcomp: this.UInt16}, {lookup: this.SFNTLookupTable}]);
    this.JustTable = new ctypes.StructType("JustTable", [{version: this.Fixed}, {format: this.UInt16}, {horizHeaderOffset: this.UInt16}, {vertHeaderOffset: this.UInt16}]);
    this.kOPBDTag = 1869636196;
    this.kOPBDCurrentVersion = 65536;
    this.kOPBDDistanceFormat = 0;
    this.kOPBDControlPointFormat = 1;
    this.OpbdTableFormat = this.UInt16;
    this.OpbdSideValues = new ctypes.StructType("OpbdSideValues", [{leftSideShift: this.SInt16}, {topSideShift: this.SInt16}, {rightSideShift: this.SInt16}, {bottomSideShift: this.SInt16}]);
    this.OpbdTable = new ctypes.StructType("OpbdTable", [{version: this.Fixed}, {format: this.OpbdTableFormat}, {lookupTable: this.SFNTLookupTable}]);
    this.kMORTTag = 1836020340;
    this.kMORTCurrentVersion = 65536;
    this.kMORTCoverVertical = 32768;
    this.kMORTCoverDescending = 16384;
    this.kMORTCoverIgnoreVertical = 8192;
    this.kMORTCoverTypeMask = 15;
    this.kMORTRearrangementType = 0;
    this.kMORTContextualType = 1;
    this.kMORTLigatureType = 2;
    this.kMORTSwashType = 4;
    this.kMORTInsertionType = 5;
    this.kMORTLigLastAction = -2147483648;
    this.kMORTLigStoreLigature = 1073741824;
    this.kMORTLigFormOffsetMask = 1073741823;
    this.kMORTLigFormOffsetShift = 2;
    this.kMORTraNoAction = 0;
    this.kMORTraxA = 1;
    this.kMORTraDx = 2;
    this.kMORTraDxA = 3;
    this.kMORTraxAB = 4;
    this.kMORTraxBA = 5;
    this.kMORTraCDx = 6;
    this.kMORTraDCx = 7;
    this.kMORTraCDxA = 8;
    this.kMORTraDCxA = 9;
    this.kMORTraDxAB = 10;
    this.kMORTraDxBA = 11;
    this.kMORTraCDxAB = 12;
    this.kMORTraCDxBA = 13;
    this.kMORTraDCxAB = 14;
    this.kMORTraDCxBA = 15;
    this.kMORTDoInsertionsBefore = 128;
    this.kMORTIsSplitVowelPiece = 64;
    this.kMORTInsertionsCountMask = 63;
    this.kMORTCurrInsertKashidaLike = 8192;
    this.kMORTMarkInsertKashidaLike = 4096;
    this.kMORTCurrInsertBefore = 2048;
    this.kMORTMarkInsertBefore = 1024;
    this.kMORTMarkJustTableCountMask = 16256;
    this.kMORTMarkJustTableCountShift = 7;
    this.kMORTCurrJustTableCountMask = 127;
    this.kMORTCurrJustTableCountShift = 0;
    this.kMORTCurrInsertCountMask = 992;
    this.kMORTCurrInsertCountShift = 5;
    this.kMORTMarkInsertCountMask = 31;
    this.kMORTMarkInsertCountShift = 0;
    this.MortSubtableMaskFlags = this.UInt32;
    this.MortLigatureActionEntry = this.UInt32;
    this.MortRearrangementSubtable = new ctypes.StructType("MortRearrangementSubtable", [{header: this.STHeader}]);
    this.MortContextualSubtable = new ctypes.StructType("MortContextualSubtable", [{header: this.STHeader}, {substitutionTableOffset: this.UInt16}]);
    this.MortLigatureSubtable = new ctypes.StructType("MortLigatureSubtable", [{header: this.STHeader}, {ligatureActionTableOffset: this.UInt16}, {componentTableOffset: this.UInt16}, {ligatureTableOffset: this.UInt16}]);
    this.MortSwashSubtable = new ctypes.StructType("MortSwashSubtable", [{lookup: this.SFNTLookupTable}]);
    this.MortInsertionSubtable = new ctypes.StructType("MortInsertionSubtable", [{header: this.STHeader}]);
    this.MortSpecificSubtable = new ctypes.StructType("MortSpecificSubtable", [{rearrangement: this.MortRearrangementSubtable}, {contextual: this.MortContextualSubtable}, {ligature: this.MortLigatureSubtable}, {swash: this.MortSwashSubtable}, {insertion: this.MortInsertionSubtable}]);
    this.MortSubtable = new ctypes.StructType("MortSubtable", [{length: this.UInt16}, {coverage: this.UInt16}, {flags: this.MortSubtableMaskFlags}, {u: this.MortSpecificSubtable}]);
    this.MortFeatureEntry = new ctypes.StructType("MortFeatureEntry", [{featureType: this.UInt16}, {featureSelector: this.UInt16}, {enableFlags: this.MortSubtableMaskFlags}, {disableFlags: this.MortSubtableMaskFlags}]);
    this.MortChain = new ctypes.StructType("MortChain", [{defaultFlags: this.MortSubtableMaskFlags}, {length: this.UInt32}, {nFeatures: this.UInt16}, {nSubtables: this.UInt16}, {featureEntries: this.MortFeatureEntry.array(1)}]);
    this.MortTable = new ctypes.StructType("MortTable", [{version: this.Fixed}, {nChains: this.UInt32}, {chains: this.MortChain.array(1)}]);
    this.kMORXTag = 1836020344;
    this.kMORXCurrentVersion = 131072;
    this.kMORXCoverVertical = -2147483648;
    this.kMORXCoverDescending = 1073741824;
    this.kMORXCoverIgnoreVertical = 536870912;
    this.kMORXCoverTypeMask = 255;
    this.MorxRearrangementSubtable = new ctypes.StructType("MorxRearrangementSubtable", [{header: this.STXHeader}]);
    this.MorxContextualSubtable = new ctypes.StructType("MorxContextualSubtable", [{header: this.STXHeader}, {substitutionTableOffset: this.UInt32}]);
    this.MorxLigatureSubtable = new ctypes.StructType("MorxLigatureSubtable", [{header: this.STXHeader}, {ligatureActionTableOffset: this.UInt32}, {componentTableOffset: this.UInt32}, {ligatureTableOffset: this.UInt32}]);
    this.MorxInsertionSubtable = new ctypes.StructType("MorxInsertionSubtable", [{header: this.STXHeader}, {insertionGlyphTableOffset: this.UInt32}]);
    this.MorxSpecificSubtable = new ctypes.StructType("MorxSpecificSubtable", [{rearrangement: this.MorxRearrangementSubtable}, {contextual: this.MorxContextualSubtable}, {ligature: this.MorxLigatureSubtable}, {swash: this.MortSwashSubtable}, {insertion: this.MorxInsertionSubtable}]);
    this.MorxSubtable = new ctypes.StructType("MorxSubtable", [{length: this.UInt32}, {coverage: this.UInt32}, {flags: this.MortSubtableMaskFlags}, {u: this.MorxSpecificSubtable}]);
    this.MorxChain = new ctypes.StructType("MorxChain", [{defaultFlags: this.MortSubtableMaskFlags}, {length: this.UInt32}, {nFeatures: this.UInt32}, {nSubtables: this.UInt32}, {featureEntries: this.MortFeatureEntry.array(1)}]);
    this.MorxTable = new ctypes.StructType("MorxTable", [{version: this.Fixed}, {nChains: this.UInt32}, {chains: this.MorxChain.array(1)}]);
    this.kPROPTag = 1886547824;
    this.kPROPCurrentVersion = 196608;
    this.kPROPPairOffsetShift = 8;
    this.kPROPPairOffsetSign = 7;
    this.kPROPIsFloaterMask = 32768;
    this.kPROPCanHangLTMask = 16384;
    this.kPROPCanHangRBMask = 8192;
    this.kPROPUseRLPairMask = 4096;
    this.kPROPPairOffsetMask = 3840;
    this.kPROPRightConnectMask = 128;
    this.kPROPZeroReserved = 96;
    this.kPROPDirectionMask = 31;
    this.kPROPLDirectionClass = 0;
    this.kPROPRDirectionClass = 1;
    this.kPROPALDirectionClass = 2;
    this.kPROPENDirectionClass = 3;
    this.kPROPESDirectionClass = 4;
    this.kPROPETDirectionClass = 5;
    this.kPROPANDirectionClass = 6;
    this.kPROPCSDirectionClass = 7;
    this.kPROPPSDirectionClass = 8;
    this.kPROPSDirectionClass = 9;
    this.kPROPWSDirectionClass = 10;
    this.kPROPONDirectionClass = 11;
    this.kPROPSENDirectionClass = 12;
    this.kPROPLREDirectionClass = 13;
    this.kPROPLRODirectionClass = 14;
    this.kPROPRLEDirectionClass = 15;
    this.kPROPRLODirectionClass = 16;
    this.kPROPPDFDirectionClass = 17;
    this.kPROPNSMDirectionClass = 18;
    this.kPROPBNDirectionClass = 19;
    this.kPROPNumDirectionClasses = 20;
    this.PropCharProperties = this.UInt16;
    this.PropTable = new ctypes.StructType("PropTable", [{version: this.Fixed}, {format: this.UInt16}, {defaultProps: this.PropCharProperties}, {lookup: this.SFNTLookupTable}]);
    this.PropLookupSegment = new ctypes.StructType("PropLookupSegment", [{lastGlyph: this.UInt16}, {firstGlyph: this.UInt16}, {value: this.UInt16}]);
    this.PropLookupSingle = new ctypes.StructType("PropLookupSingle", [{glyph: this.UInt16}, {props: this.PropCharProperties}]);
    this.kTRAKTag = 1953653099;
    this.kTRAKCurrentVersion = 65536;
    this.kTRAKUniformFormat = 0;
    this.TrakValue = this.SInt16;
    this.TrakTableEntry = new ctypes.StructType("TrakTableEntry", [{track: this.Fixed}, {nameTableIndex: this.UInt16}, {sizesOffset: this.UInt16}]);
    this.TrakTableData = new ctypes.StructType("TrakTableData", [{nTracks: this.UInt16}, {nSizes: this.UInt16}, {sizeTableOffset: this.UInt32}, {trakTable: this.TrakTableEntry.array(1)}]);
    this.TrakTable = new ctypes.StructType("TrakTable", [{version: this.Fixed}, {format: this.UInt16}, {horizOffset: this.UInt16}, {vertOffset: this.UInt16}]);
    this.kKERNTag = 1801810542;
    this.kKERNCurrentVersion = 65536;
    this.kKERNVertical = 32768;
    this.kKERNResetCrossStream = 32768;
    this.kKERNCrossStream = 16384;
    this.kKERNVariation = 8192;
    this.kKERNUnusedBits = 7936;
    this.kKERNFormatMask = 255;
    this.kKERNOrderedList = 0;
    this.kKERNStateTable = 1;
    this.kKERNSimpleArray = 2;
    this.kKERNIndexArray = 3;
    this.kKERNLineStart = 1;
    this.kKERNLineEndKerning = 2;
    this.kKERNNoCrossKerning = 4;
    this.kKERNNotesRequested = 8;
    this.kKERNNoStakeNote = 1;
    this.kKERNCrossStreamResetNote = 2;
    this.kKERNNotApplied = 1;
    this.KernTableFormat = this.UInt8;
    this.KernSubtableInfo = this.UInt16;
    this.KernKerningValue = this.SInt16;
    this.KernArrayOffset = this.UInt16;
    this.KernVersion0Header = new ctypes.StructType("KernVersion0Header", [{version: this.UInt16}, {nTables: this.UInt16}, {firstSubtable: this.UInt16.array(1)}]);
    this.KernTableHeader = new ctypes.StructType("KernTableHeader", [{version: this.Fixed}, {nTables: this.SInt32}, {firstSubtable: this.UInt16.array(1)}]);
    this.KernTableHeaderPtr = this.KernTableHeader.ptr;
    this.KernTableHeaderHandle = this.KernTableHeaderPtr.ptr;
    this.KernKerningPair = new ctypes.StructType("KernKerningPair", [{left: this.UInt16}, {right: this.UInt16}]);
    this.KernOrderedListEntry = new ctypes.StructType("KernOrderedListEntry", [{pair: this.KernKerningPair}, {value: this.KernKerningValue}]);
    this.KernOrderedListEntryPtr = this.KernOrderedListEntry.ptr;
    this.KernOrderedListHeader = new ctypes.StructType("KernOrderedListHeader", [{nPairs: this.UInt16}, {searchRange: this.UInt16}, {entrySelector: this.UInt16}, {rangeShift: this.UInt16}, {table: this.UInt16.array(1)}]);
    this.KernStateHeader = new ctypes.StructType("KernStateHeader", [{header: this.STHeader}, {valueTable: this.UInt16}, {firstTable: this.UInt8.array(1)}]);
    this.KernStateEntry = new ctypes.StructType("KernStateEntry", [{newState: this.UInt16}, {flags: this.UInt16}]);
    this.KernOffsetTable = new ctypes.StructType("KernOffsetTable", [{firstGlyph: this.UInt16}, {nGlyphs: this.UInt16}, {offsetTable: this.KernArrayOffset.array(1)}]);
    this.KernOffsetTablePtr = this.KernOffsetTable.ptr;
    this.KernSimpleArrayHeader = new ctypes.StructType("KernSimpleArrayHeader", [{rowWidth: this.UInt16}, {leftOffsetTable: this.UInt16}, {rightOffsetTable: this.UInt16}, {theArray: this.KernArrayOffset}, {firstTable: this.UInt16.array(1)}]);
    this.KernIndexArrayHeader = new ctypes.StructType("KernIndexArrayHeader", [{glyphCount: this.UInt16}, {kernValueCount: this.UInt8}, {leftClassCount: this.UInt8}, {rightClassCount: this.UInt8}, {flags: this.UInt8}, {kernValue: this.SInt16.array(1)}, {leftClass: this.UInt8.array(1)}, {rightClass: this.UInt8.array(1)}, {kernIndex: this.UInt8.array(1)}]);
    this.KernFormatSpecificHeader = new ctypes.StructType("KernFormatSpecificHeader", [{orderedList: this.KernOrderedListHeader}, {stateTable: this.KernStateHeader}, {simpleArray: this.KernSimpleArrayHeader}, {indexArray: this.KernIndexArrayHeader}]);
    this.KernVersion0SubtableHeader = new ctypes.StructType("KernVersion0SubtableHeader", [{version: this.UInt16}, {length: this.UInt16}, {stInfo: this.KernSubtableInfo}, {fsHeader: this.KernFormatSpecificHeader}]);
    this.KernSubtableHeader = new ctypes.StructType("KernSubtableHeader", [{length: this.SInt32}, {stInfo: this.KernSubtableInfo}, {tupleIndex: this.SInt16}, {fsHeader: this.KernFormatSpecificHeader}]);
    this.KernSubtableHeaderPtr = this.KernSubtableHeader.ptr;
    this.kBSLNTag = 1651731566;
    this.kBSLNCurrentVersion = 65536;
    this.kBSLNDistanceFormatNoMap = 0;
    this.kBSLNDistanceFormatWithMap = 1;
    this.kBSLNControlPointFormatNoMap = 2;
    this.kBSLNControlPointFormatWithMap = 3;
    this.kBSLNRomanBaseline = 0;
    this.kBSLNIdeographicCenterBaseline = 1;
    this.kBSLNIdeographicLowBaseline = 2;
    this.kBSLNHangingBaseline = 3;
    this.kBSLNMathBaseline = 4;
    this.kBSLNLastBaseline = 31;
    this.kBSLNNumBaselineClasses = 32;
    this.kBSLNNoBaselineOverride = 255;
    this.BslnBaselineClass = this.UInt32;
    this.BslnBaselineRecord = this.Fixed.array(32);
    this.BslnFormat0Part = new ctypes.StructType("BslnFormat0Part", [{deltas: this.SInt16.array(32)}]);
    this.BslnFormat1Part = new ctypes.StructType("BslnFormat1Part", [{deltas: this.SInt16.array(32)}, {mappingData: this.SFNTLookupTable}]);
    this.BslnFormat2Part = new ctypes.StructType("BslnFormat2Part", [{stdGlyph: this.UInt16}, {ctlPoints: this.SInt16.array(32)}]);
    this.BslnFormat3Part = new ctypes.StructType("BslnFormat3Part", [{stdGlyph: this.UInt16}, {ctlPoints: this.SInt16.array(32)}, {mappingData: this.SFNTLookupTable}]);
    this.BslnFormatUnion = new ctypes.StructType("BslnFormatUnion", [{fmt0Part: this.BslnFormat0Part}, {fmt1Part: this.BslnFormat1Part}, {fmt2Part: this.BslnFormat2Part}, {fmt3Part: this.BslnFormat3Part}]);
    this.BslnTableFormat = this.UInt16;
    this.BslnTable = new ctypes.StructType("BslnTable", [{version: this.Fixed}, {format: this.BslnTableFormat}, {defaultBaseline: this.UInt16}, {parts: this.BslnFormatUnion}]);
    this.BslnTablePtr = this.BslnTable.ptr;
    this.ALMXHeader = new ctypes.StructType("ALMXHeader", [{Version: this.Fixed}, {Flags: this.UInt16}, {NMasters: this.UInt16}, {FirstGlyph: this.UInt16}, {LastGlyph: this.UInt16}, {lookup: this.SFNTLookupTable}]);
    this.ALMXGlyphEntry = new ctypes.StructType("ALMXGlyphEntry", [{GlyphIndexOffset: this.SInt16}, {HorizontalAdvance: this.SInt16}, {XOffsetToHOrigin: this.SInt16}, {VerticalAdvance: this.SInt16}, {YOffsetToVOrigin: this.SInt16}]);
    this.ROTAHeader = new ctypes.StructType("ROTAHeader", [{Version: this.Fixed}, {Flags: this.UInt16}, {NMasters: this.UInt16}, {FirstGlyph: this.UInt16}, {LastGlyph: this.UInt16}, {lookup: this.SFNTLookupTable}]);
    this.ROTAGlyphEntry = new ctypes.StructType("ROTAGlyphEntry", [{GlyphIndexOffset: this.SInt16}, {HBaselineOffset: this.SInt16}, {VBaselineOffset: this.SInt16}]);
}

// Based on /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSTypes.h
function ATSTypes_h(lib) {
    CGBase_h.call(this, lib);
    Files_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._ATSTYPES_H)
        return;
    this._ATSTYPES_H = true;

    this.ATSPoint = this.Float32Point;
    this.ATSFSSpec = this.FSSpec;
    this.FMGeneration = this.UInt32;
    this.FMFontFamily = this.SInt16;
    this.FMFontStyle = this.SInt16;
    this.FMFontSize = this.SInt16;
    this.FMFont = this.UInt32;
    this.FMFontFamilyInstance = new ctypes.StructType("FMFontFamilyInstance", [{fontFamily: this.FMFontFamily}, {fontStyle: this.FMFontStyle}]);
    this.FMFontFamilyIterator = new ctypes.StructType("FMFontFamilyIterator", [{reserved: this.UInt32.array(16)}]);
    this.FMFontIterator = new ctypes.StructType("FMFontIterator", [{reserved: this.UInt32.array(16)}]);
    this.FMFontFamilyInstanceIterator = new ctypes.StructType("FMFontFamilyInstanceIterator", [{reserved: this.UInt32.array(16)}]);
    this.kInvalidGeneration = 0;
    this.kInvalidFontFamily = -1;
    this.kInvalidFont = 0;
    this.kFMCurrentFilterFormat = 0;
    this.FMFilterSelector = this.UInt32;
    this.kFMFontTechnologyFilterSelector = 1;
    this.kFMFontContainerFilterSelector = 2;
    this.kFMGenerationFilterSelector = 3;
    this.kFMFontFamilyCallbackFilterSelector = 4;
    this.kFMFontCallbackFilterSelector = 5;
    this.kFMFontDirectoryFilterSelector = 6;
    this.kFMFontFileRefFilterSelector = 10;
    this.kFMTrueTypeFontTechnology = 1953658213;
    this.kFMPostScriptFontTechnology = 1954115633;
    this.FMFontFamilyCallbackFilterProcPtr = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [this.FMFontFamily, ctypes.void_t.ptr]).ptr;
    this.FMFontCallbackFilterProcPtr = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [this.FMFont, ctypes.void_t.ptr]).ptr;
    this.FMFontFamilyCallbackFilterUPP = this.FMFontFamilyCallbackFilterProcPtr;
    this.FMFontCallbackFilterUPP = this.FMFontCallbackFilterProcPtr;
    // Dropping inline function 'NewFMFontFamilyCallbackFilterUPP'.
    // Dropping inline function 'NewFMFontCallbackFilterUPP'.
    // Dropping inline function 'DisposeFMFontFamilyCallbackFilterUPP'.
    // Dropping inline function 'DisposeFMFontCallbackFilterUPP'.
    // Dropping inline function 'InvokeFMFontFamilyCallbackFilterUPP'.
    // Dropping inline function 'InvokeFMFontCallbackFilterUPP'.
    this.FMFontDirectoryFilter = new ctypes.StructType("FMFontDirectoryFilter", [{fontFolderDomain: this.SInt16}, {reserved: this.UInt32.array(2)}]);
    this.FMFilter = new ctypes.StructType("FMFilter", []);
    this.ATSOptionFlags = this.OptionBits;
    this.ATSGeneration = this.UInt32;
    this.ATSFontContainerRef = this.UInt32;
    this.ATSFontFamilyRef = this.UInt32;
    this.ATSFontRef = this.UInt32;
    this.ATSGlyphRef = this.UInt16;
    this.ATSFontSize = this.CGFloat;
    this.ATSFontFormat = this.UInt32;
    this.kATSFontFormatUnspecified = 0;
    this.kATSGenerationUnspecified = 0;
    this.kATSFontContainerRefUnspecified = 0;
    this.kATSFontFamilyRefUnspecified = 0;
    this.kATSFontRefUnspecified = 0;
    this.ATSFontMetrics = new ctypes.StructType("ATSFontMetrics", [{version: this.UInt32}, {ascent: this.CGFloat}, {descent: this.CGFloat}, {leading: this.CGFloat}, {avgAdvanceWidth: this.CGFloat}, {maxAdvanceWidth: this.CGFloat}, {minLeftSideBearing: this.CGFloat}, {minRightSideBearing: this.CGFloat}, {stemWidth: this.CGFloat}, {stemHeight: this.CGFloat}, {capHeight: this.CGFloat}, {xHeight: this.CGFloat}, {italicAngle: this.CGFloat}, {underlinePosition: this.CGFloat}, {underlineThickness: this.CGFloat}]);
    this.kATSItalicQDSkew = 16384;
    this.kATSBoldQDStretch = 98304;
    this.kATSRadiansFactor = 1144;
    this.ATSCurveType = this.UInt16;
    this.kATSCubicCurveType = 1;
    this.kATSQuadCurveType = 2;
    this.kATSOtherCurveType = 3;
    this.kATSDeletedGlyphcode = 65535;
    this.ATSUCurvePath = new ctypes.StructType("ATSUCurvePath", [{vectors: this.UInt32}, {controlBits: this.UInt32.array(1)}, {vector: this.ATSPoint.array(1)}]);
    this.ATSUCurvePaths = new ctypes.StructType("ATSUCurvePaths", [{contours: this.UInt32}, {contour: this.ATSUCurvePath.array(1)}]);
    this.ATSGlyphIdealMetrics = new ctypes.StructType("ATSGlyphIdealMetrics", [{advance: this.ATSPoint}, {sideBearing: this.ATSPoint}, {otherSideBearing: this.ATSPoint}]);
    this.ATSGlyphScreenMetrics = new ctypes.StructType("ATSGlyphScreenMetrics", [{deviceAdvance: this.ATSPoint}, {topLeft: this.ATSPoint}, {height: this.UInt32}, {width: this.UInt32}, {sideBearing: this.ATSPoint}, {otherSideBearing: this.ATSPoint}]);
    this.GlyphID = this.ATSGlyphRef;
}

// Based on /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/SFNTTypes.h
function SFNTTypes_h(lib) {
    MacTypes_h.call(this, lib);

    if (this._SFNTTYPES_H)
        return;
    this._SFNTTYPES_H = true;

    this.sfntDirectoryEntry = new ctypes.StructType("sfntDirectoryEntry", [{tableTag: this.FourCharCode}, {checkSum: this.UInt32}, {offset: this.UInt32}, {length: this.UInt32}]);
    this.sfntDirectory = new ctypes.StructType("sfntDirectory", [{format: this.FourCharCode}, {numOffsets: this.UInt16}, {searchRange: this.UInt16}, {entrySelector: this.UInt16}, {rangeShift: this.UInt16}, {table: this.sfntDirectoryEntry.array(1)}]);
    this.sizeof_sfntDirectory = 12;
    this.cmapFontTableTag = 1668112752;
    this.kFontUnicodePlatform = 0;
    this.kFontMacintoshPlatform = 1;
    this.kFontReservedPlatform = 2;
    this.kFontMicrosoftPlatform = 3;
    this.kFontCustomPlatform = 4;
    this.kFontUnicodeDefaultSemantics = 0;
    this.kFontUnicodeV1_1Semantics = 1;
    this.kFontISO10646_1993Semantics = 2;
    this.kFontUnicodeV2_0BMPOnlySemantics = 3;
    this.kFontUnicodeV2_0FullCoverageSemantics = 4;
    this.kFontUnicodeV4_0VariationSequenceSemantics = 5;
    this.kFontRomanScript = 0;
    this.kFontJapaneseScript = 1;
    this.kFontTraditionalChineseScript = 2;
    this.kFontChineseScript = 2;
    this.kFontKoreanScript = 3;
    this.kFontArabicScript = 4;
    this.kFontHebrewScript = 5;
    this.kFontGreekScript = 6;
    this.kFontCyrillicScript = 7;
    this.kFontRussian = 7;
    this.kFontRSymbolScript = 8;
    this.kFontDevanagariScript = 9;
    this.kFontGurmukhiScript = 10;
    this.kFontGujaratiScript = 11;
    this.kFontOriyaScript = 12;
    this.kFontBengaliScript = 13;
    this.kFontTamilScript = 14;
    this.kFontTeluguScript = 15;
    this.kFontKannadaScript = 16;
    this.kFontMalayalamScript = 17;
    this.kFontSinhaleseScript = 18;
    this.kFontBurmeseScript = 19;
    this.kFontKhmerScript = 20;
    this.kFontThaiScript = 21;
    this.kFontLaotianScript = 22;
    this.kFontGeorgianScript = 23;
    this.kFontArmenianScript = 24;
    this.kFontSimpleChineseScript = 25;
    this.kFontTibetanScript = 26;
    this.kFontMongolianScript = 27;
    this.kFontGeezScript = 28;
    this.kFontEthiopicScript = 28;
    this.kFontAmharicScript = 28;
    this.kFontSlavicScript = 29;
    this.kFontEastEuropeanRomanScript = 29;
    this.kFontVietnameseScript = 30;
    this.kFontExtendedArabicScript = 31;
    this.kFontSindhiScript = 31;
    this.kFontUninterpretedScript = 32;
    this.kFontMicrosoftSymbolScript = 0;
    this.kFontMicrosoftStandardScript = 1;
    this.kFontMicrosoftUCS4Script = 10;
    this.kFontCustom8BitScript = 0;
    this.kFontCustom816BitScript = 1;
    this.kFontCustom16BitScript = 2;
    this.kFontEnglishLanguage = 0;
    this.kFontFrenchLanguage = 1;
    this.kFontGermanLanguage = 2;
    this.kFontItalianLanguage = 3;
    this.kFontDutchLanguage = 4;
    this.kFontSwedishLanguage = 5;
    this.kFontSpanishLanguage = 6;
    this.kFontDanishLanguage = 7;
    this.kFontPortugueseLanguage = 8;
    this.kFontNorwegianLanguage = 9;
    this.kFontHebrewLanguage = 10;
    this.kFontJapaneseLanguage = 11;
    this.kFontArabicLanguage = 12;
    this.kFontFinnishLanguage = 13;
    this.kFontGreekLanguage = 14;
    this.kFontIcelandicLanguage = 15;
    this.kFontMalteseLanguage = 16;
    this.kFontTurkishLanguage = 17;
    this.kFontCroatianLanguage = 18;
    this.kFontTradChineseLanguage = 19;
    this.kFontUrduLanguage = 20;
    this.kFontHindiLanguage = 21;
    this.kFontThaiLanguage = 22;
    this.kFontKoreanLanguage = 23;
    this.kFontLithuanianLanguage = 24;
    this.kFontPolishLanguage = 25;
    this.kFontHungarianLanguage = 26;
    this.kFontEstonianLanguage = 27;
    this.kFontLettishLanguage = 28;
    this.kFontLatvianLanguage = 28;
    this.kFontSaamiskLanguage = 29;
    this.kFontLappishLanguage = 29;
    this.kFontFaeroeseLanguage = 30;
    this.kFontFarsiLanguage = 31;
    this.kFontPersianLanguage = 31;
    this.kFontRussianLanguage = 32;
    this.kFontSimpChineseLanguage = 33;
    this.kFontFlemishLanguage = 34;
    this.kFontIrishLanguage = 35;
    this.kFontAlbanianLanguage = 36;
    this.kFontRomanianLanguage = 37;
    this.kFontCzechLanguage = 38;
    this.kFontSlovakLanguage = 39;
    this.kFontSlovenianLanguage = 40;
    this.kFontYiddishLanguage = 41;
    this.kFontSerbianLanguage = 42;
    this.kFontMacedonianLanguage = 43;
    this.kFontBulgarianLanguage = 44;
    this.kFontUkrainianLanguage = 45;
    this.kFontByelorussianLanguage = 46;
    this.kFontUzbekLanguage = 47;
    this.kFontKazakhLanguage = 48;
    this.kFontAzerbaijaniLanguage = 49;
    this.kFontAzerbaijanArLanguage = 50;
    this.kFontArmenianLanguage = 51;
    this.kFontGeorgianLanguage = 52;
    this.kFontMoldavianLanguage = 53;
    this.kFontKirghizLanguage = 54;
    this.kFontTajikiLanguage = 55;
    this.kFontTurkmenLanguage = 56;
    this.kFontMongolianLanguage = 57;
    this.kFontMongolianCyrLanguage = 58;
    this.kFontPashtoLanguage = 59;
    this.kFontKurdishLanguage = 60;
    this.kFontKashmiriLanguage = 61;
    this.kFontSindhiLanguage = 62;
    this.kFontTibetanLanguage = 63;
    this.kFontNepaliLanguage = 64;
    this.kFontSanskritLanguage = 65;
    this.kFontMarathiLanguage = 66;
    this.kFontBengaliLanguage = 67;
    this.kFontAssameseLanguage = 68;
    this.kFontGujaratiLanguage = 69;
    this.kFontPunjabiLanguage = 70;
    this.kFontOriyaLanguage = 71;
    this.kFontMalayalamLanguage = 72;
    this.kFontKannadaLanguage = 73;
    this.kFontTamilLanguage = 74;
    this.kFontTeluguLanguage = 75;
    this.kFontSinhaleseLanguage = 76;
    this.kFontBurmeseLanguage = 77;
    this.kFontKhmerLanguage = 78;
    this.kFontLaoLanguage = 79;
    this.kFontVietnameseLanguage = 80;
    this.kFontIndonesianLanguage = 81;
    this.kFontTagalogLanguage = 82;
    this.kFontMalayRomanLanguage = 83;
    this.kFontMalayArabicLanguage = 84;
    this.kFontAmharicLanguage = 85;
    this.kFontTigrinyaLanguage = 86;
    this.kFontGallaLanguage = 87;
    this.kFontOromoLanguage = 87;
    this.kFontSomaliLanguage = 88;
    this.kFontSwahiliLanguage = 89;
    this.kFontRuandaLanguage = 90;
    this.kFontRundiLanguage = 91;
    this.kFontChewaLanguage = 92;
    this.kFontMalagasyLanguage = 93;
    this.kFontEsperantoLanguage = 94;
    this.kFontWelshLanguage = 128;
    this.kFontBasqueLanguage = 129;
    this.kFontCatalanLanguage = 130;
    this.kFontLatinLanguage = 131;
    this.kFontQuechuaLanguage = 132;
    this.kFontGuaraniLanguage = 133;
    this.kFontAymaraLanguage = 134;
    this.kFontTatarLanguage = 135;
    this.kFontUighurLanguage = 136;
    this.kFontDzongkhaLanguage = 137;
    this.kFontJavaneseRomLanguage = 138;
    this.kFontSundaneseRomLanguage = 139;
    this.kFontNoPlatformCode = -1;
    this.kFontNoScriptCode = -1;
    this.kFontNoLanguageCode = -1;
    this.sfntCMapSubHeader = new ctypes.StructType("sfntCMapSubHeader", [{format: this.UInt16}, {length: this.UInt16}, {languageID: this.UInt16}]);
    this.sizeof_sfntCMapSubHeader = 6;
    this.sfntCMapExtendedSubHeader = new ctypes.StructType("sfntCMapExtendedSubHeader", [{format: this.UInt16}, {reserved: this.UInt16}, {length: this.UInt32}, {language: this.UInt32}]);
    this.sizeof_sfntCMapExtendedSubHeader = 12;
    this.sfntCMapEncoding = new ctypes.StructType("sfntCMapEncoding", [{platformID: this.UInt16}, {scriptID: this.UInt16}, {offset: this.UInt32}]);
    this.sizeof_sfntCMapEncoding = 8;
    this.sfntCMapHeader = new ctypes.StructType("sfntCMapHeader", [{version: this.UInt16}, {numTables: this.UInt16}, {encoding: this.sfntCMapEncoding.array(1)}]);
    this.sizeof_sfntCMapHeader = 4;
    this.nameFontTableTag = 1851878757;
    this.kFontCopyrightName = 0;
    this.kFontFamilyName = 1;
    this.kFontStyleName = 2;
    this.kFontUniqueName = 3;
    this.kFontFullName = 4;
    this.kFontVersionName = 5;
    this.kFontPostscriptName = 6;
    this.kFontTrademarkName = 7;
    this.kFontManufacturerName = 8;
    this.kFontDesignerName = 9;
    this.kFontDescriptionName = 10;
    this.kFontVendorURLName = 11;
    this.kFontDesignerURLName = 12;
    this.kFontLicenseDescriptionName = 13;
    this.kFontLicenseInfoURLName = 14;
    this.kFontPreferredFamilyName = 16;
    this.kFontPreferredSubfamilyName = 17;
    this.kFontMacCompatibleFullName = 18;
    this.kFontSampleTextName = 19;
    this.kFontPostScriptCIDName = 20;
    this.kFontLastReservedName = 255;
    this.kFontNoNameCode = -1;
    this.sfntNameRecord = new ctypes.StructType("sfntNameRecord", [{platformID: this.UInt16}, {scriptID: this.UInt16}, {languageID: this.UInt16}, {nameID: this.UInt16}, {length: this.UInt16}, {offset: this.UInt16}]);
    this.sizeof_sfntNameRecord = 12;
    this.sfntNameHeader = new ctypes.StructType("sfntNameHeader", [{format: this.UInt16}, {count: this.UInt16}, {stringOffset: this.UInt16}, {rec: this.sfntNameRecord.array(1)}]);
    this.sizeof_sfntNameHeader = 6;
    this.variationFontTableTag = 1719034226;
    this.sfntVariationAxis = new ctypes.StructType("sfntVariationAxis", [{axisTag: this.FourCharCode}, {minValue: this.Fixed}, {defaultValue: this.Fixed}, {maxValue: this.Fixed}, {flags: this.SInt16}, {nameID: this.SInt16}]);
    this.sizeof_sfntVariationAxis = 20;
    this.sfntInstance = new ctypes.StructType("sfntInstance", [{nameID: this.SInt16}, {flags: this.SInt16}, {coord: this.Fixed.array(1)}]);
    this.sizeof_sfntInstance = 4;
    this.sfntVariationHeader = new ctypes.StructType("sfntVariationHeader", [{version: this.Fixed}, {offsetToData: this.UInt16}, {countSizePairs: this.UInt16}, {axisCount: this.UInt16}, {axisSize: this.UInt16}, {instanceCount: this.UInt16}, {instanceSize: this.UInt16}, {axis: this.sfntVariationAxis.array(1)}, {instance: this.sfntInstance.array(1)}]);
    this.sizeof_sfntVariationHeader = 16;
    this.descriptorFontTableTag = 1717859171;
    this.sfntFontDescriptor = new ctypes.StructType("sfntFontDescriptor", [{name: this.FourCharCode}, {value: this.Fixed}]);
    this.sfntDescriptorHeader = new ctypes.StructType("sfntDescriptorHeader", [{version: this.Fixed}, {descriptorCount: this.SInt32}, {descriptor: this.sfntFontDescriptor.array(1)}]);
    this.sizeof_sfntDescriptorHeader = 8;
    this.featureFontTableTag = 1717920116;
    this.sfntFeatureName = new ctypes.StructType("sfntFeatureName", [{featureType: this.UInt16}, {settingCount: this.UInt16}, {offsetToSettings: this.SInt32}, {featureFlags: this.UInt16}, {nameID: this.UInt16}]);
    this.sfntFontFeatureSetting = new ctypes.StructType("sfntFontFeatureSetting", [{setting: this.UInt16}, {nameID: this.UInt16}]);
    this.sfntFontRunFeature = new ctypes.StructType("sfntFontRunFeature", [{featureType: this.UInt16}, {setting: this.UInt16}]);
    this.sfntFeatureHeader = new ctypes.StructType("sfntFeatureHeader", [{version: this.SInt32}, {featureNameCount: this.UInt16}, {featureSetCount: this.UInt16}, {reserved: this.SInt32}, {names: this.sfntFeatureName.array(1)}, {settings: this.sfntFontFeatureSetting.array(1)}, {runs: this.sfntFontRunFeature.array(1)}]);
    this.os2FontTableTag = 1330851634;
    this.nonGlyphID = 65535;
    this.kFontNoPlatform = -1;
    this.kFontNoScript = -1;
    this.kFontNoLanguage = -1;
    this.kFontNoName = -1;
    this.FontNameCode = this.UInt32;
    this.FontPlatformCode = this.UInt32;
    this.FontScriptCode = this.UInt32;
    this.FontLanguageCode = this.UInt32;
    this.FontVariation = new ctypes.StructType("FontVariation", [{name: this.FourCharCode}, {value: this.Fixed}]);
}

// Based on /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ScalerStreamTypes.h
function ScalerStreamTypes_h(lib) {
    MacTypes_h.call(this, lib);

    if (this._SCALERSTREAMTYPES_H)
        return;
    this._SCALERSTREAMTYPES_H = true;

    this.cexec68K = 1;
    this.truetypeStreamType = 1;
    this.type1StreamType = 2;
    this.type3StreamType = 4;
    this.type42StreamType = 8;
    this.type42GXStreamType = 16;
    this.portableStreamType = 32;
    this.flattenedStreamType = 64;
    this.cidType2StreamType = 128;
    this.cidType0StreamType = 256;
    this.type1CFFStreamType = 512;
    this.evenOddModifierStreamType = 32768;
    this.eexecBinaryModifierStreamType = 65536;
    this.unicodeMappingModifierStreamType = 131072;
    this.scalerSpecifcModifierMask = 61440;
    this.streamTypeModifierMask = -4096;
    this.scalerStreamTypeFlag = this.UInt32;
    this.downloadStreamAction = 0;
    this.asciiDownloadStreamAction = 1;
    this.fontSizeQueryStreamAction = 2;
    this.encodingOnlyStreamAction = 3;
    this.prerequisiteQueryStreamAction = 4;
    this.prerequisiteItemStreamAction = 5;
    this.variationQueryStreamAction = 6;
    this.variationPSOperatorStreamAction = 7;
    this.scalerStreamAction = this.SInt32;
    this.selectAllVariations = -1;
    this.scalerPrerequisiteItem = new ctypes.StructType("scalerPrerequisiteItem", [{enumeration: this.SInt32}, {size: this.SInt32}, {name: ctypes.unsigned_char.array(1)}]);
    this.scalerStream = new ctypes.StructType("scalerStream", []);
    this.scalerStreamData = new ctypes.StructType("scalerStreamData", [{hexFlag: this.SInt32}, {byteCount: this.SInt32}, {data: ctypes.void_t.ptr}]);
}

Components.utils.import("resource://gre/modules/ctypes.jsm");
Components.utils.import("resource://osxtypes/MacTypes.jsm");
Components.utils.import("resource://osxtypes/CoreFoundation.jsm");
Components.utils.import("resource://osxtypes/CoreGraphics.jsm");
Components.utils.import("resource://osxtypes/CarbonCore.jsm");

const EXPORTED_SYMBOLS = ["ATS", "ATSLayoutTypes_h", "ATSFont_h", "SFNTLayoutTypes_h", "ATSTypes_h", "SFNTTypes_h", "ScalerStreamTypes_h"];

function ATS() {
    let libpath = "/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/ATS";
    let lib = ctypes.open(libpath);
    this.close = function() {
        lib.close();
    };

    ATSLayoutTypes_h.call(this, lib);
    ATSFont_h.call(this, lib);
    SFNTLayoutTypes_h.call(this, lib);
    ATSTypes_h.call(this, lib);
    SFNTTypes_h.call(this, lib);
    ScalerStreamTypes_h.call(this, lib);
}
