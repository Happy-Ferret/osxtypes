// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h
function AUComponent_h(lib) {
    CoreAudioTypes_h.call(this, lib);
    AudioComponent_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._AUCOMPONENT_H)
        return;
    this._AUCOMPONENT_H = true;

    this.AudioUnit = this.AudioComponentInstance;
    this.kAudioUnitType_Output = 1635086197;
    this.kAudioUnitType_MusicDevice = 1635085685;
    this.kAudioUnitType_MusicEffect = 1635085670;
    this.kAudioUnitType_FormatConverter = 1635083875;
    this.kAudioUnitType_Effect = 1635083896;
    this.kAudioUnitType_Mixer = 1635085688;
    this.kAudioUnitType_Panner = 1635086446;
    this.kAudioUnitType_Generator = 1635084142;
    this.kAudioUnitType_OfflineEffect = 1635086188;
    this.kAudioUnitManufacturer_Apple = 1634758764;
    this.kAudioUnitSubType_GenericOutput = 1734700658;
    this.kAudioUnitSubType_HALOutput = 1634230636;
    this.kAudioUnitSubType_DefaultOutput = 1684366880;
    this.kAudioUnitSubType_SystemOutput = 1937339168;
    this.kAudioUnitSubType_DLSSynth = 1684828960;
    this.kAudioUnitSubType_AUConverter = 1668247158;
    this.kAudioUnitSubType_TimePitch = 1953329268;
    this.kAudioUnitSubType_Varispeed = 1986097769;
    this.kAudioUnitSubType_DeferredRenderer = 1684366962;
    this.kAudioUnitSubType_Splitter = 1936747636;
    this.kAudioUnitSubType_Merger = 1835364967;
    this.kAudioUnitSubType_Delay = 1684368505;
    this.kAudioUnitSubType_LowPassFilter = 1819304307;
    this.kAudioUnitSubType_HighPassFilter = 1752195443;
    this.kAudioUnitSubType_BandPassFilter = 1651532147;
    this.kAudioUnitSubType_HighShelfFilter = 1752393830;
    this.kAudioUnitSubType_LowShelfFilter = 1819502694;
    this.kAudioUnitSubType_ParametricEQ = 1886217585;
    this.kAudioUnitSubType_GraphicEQ = 1735550321;
    this.kAudioUnitSubType_PeakLimiter = 1819112562;
    this.kAudioUnitSubType_DynamicsProcessor = 1684237680;
    this.kAudioUnitSubType_MultiBandCompressor = 1835232624;
    this.kAudioUnitSubType_MatrixReverb = 1836213622;
    this.kAudioUnitSubType_SampleDelay = 1935961209;
    this.kAudioUnitSubType_Pitch = 1953329268;
    this.kAudioUnitSubType_AUFilter = 1718185076;
    this.kAudioUnitSubType_NetSend = 1853058660;
    this.kAudioUnitSubType_Distortion = 1684632436;
    this.kAudioUnitSubType_RogerBeep = 1919903602;
    this.kAudioUnitSubType_MultiChannelMixer = 1835232632;
    this.kAudioUnitSubType_StereoMixer = 1936554098;
    this.kAudioUnitSubType_3DMixer = 862219640;
    this.kAudioUnitSubType_MatrixMixer = 1836608888;
    this.kAudioUnitSubType_SphericalHeadPanner = 1936746610;
    this.kAudioUnitSubType_VectorPanner = 1986158963;
    this.kAudioUnitSubType_SoundFieldPanner = 1634558569;
    this.kAudioUnitSubType_HRTFPanner = 1752331366;
    this.kAudioUnitSubType_ScheduledSoundPlayer = 1936945260;
    this.kAudioUnitSubType_AudioFilePlayer = 1634103404;
    this.kAudioUnitSubType_NetReceive = 1852990326;
    this.kAudioUnitRenderAction_PreRender = 4;
    this.kAudioUnitRenderAction_PostRender = 8;
    this.kAudioUnitRenderAction_OutputIsSilence = 16;
    this.kAudioOfflineUnitRenderAction_Preflight = 32;
    this.kAudioOfflineUnitRenderAction_Render = 64;
    this.kAudioOfflineUnitRenderAction_Complete = 128;
    this.kAudioUnitRenderAction_PostRenderError = 256;
    this.AudioUnitRenderActionFlags = this.UInt32;
    this.kAudioUnitErr_InvalidProperty = -10879;
    this.kAudioUnitErr_InvalidParameter = -10878;
    this.kAudioUnitErr_InvalidElement = -10877;
    this.kAudioUnitErr_NoConnection = -10876;
    this.kAudioUnitErr_FailedInitialization = -10875;
    this.kAudioUnitErr_TooManyFramesToProcess = -10874;
    this.kAudioUnitErr_InvalidFile = -10871;
    this.kAudioUnitErr_FormatNotSupported = -10868;
    this.kAudioUnitErr_Uninitialized = -10867;
    this.kAudioUnitErr_InvalidScope = -10866;
    this.kAudioUnitErr_PropertyNotWritable = -10865;
    this.kAudioUnitErr_CannotDoInCurrentContext = -10863;
    this.kAudioUnitErr_InvalidPropertyValue = -10851;
    this.kAudioUnitErr_PropertyNotInUse = -10850;
    this.kAudioUnitErr_Initialized = -10849;
    this.kAudioUnitErr_InvalidOfflineRender = -10848;
    this.kAudioUnitErr_Unauthorized = -10847;
    this.AudioUnitPropertyID = this.UInt32;
    this.AudioUnitScope = this.UInt32;
    this.AudioUnitElement = this.UInt32;
    this.AudioUnitParameterID = this.UInt32;
    this.AudioUnitParameterValue = this.Float32;
    this.kParameterEvent_Immediate = 1;
    this.kParameterEvent_Ramped = 2;
    this.AUParameterEventType = this.UInt32;
    this.AudioUnitParameterEvent = new ctypes.StructType("AudioUnitParameterEvent", []);
    this.AudioUnitParameter = new ctypes.StructType("AudioUnitParameter", [{mAudioUnit: this.AudioUnit}, {mParameterID: this.AudioUnitParameterID}, {mScope: this.AudioUnitScope}, {mElement: this.AudioUnitElement}]);
    this.AudioUnitProperty = new ctypes.StructType("AudioUnitProperty", [{mAudioUnit: this.AudioUnit}, {mPropertyID: this.AudioUnitPropertyID}, {mScope: this.AudioUnitScope}, {mElement: this.AudioUnitElement}]);
    this.AURenderCallback = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.AudioUnitRenderActionFlags.ptr, this.AudioTimeStamp.ptr, this.UInt32, this.UInt32, this.AudioBufferList.ptr]).ptr;
    this.AudioUnitPropertyListenerProc = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [ctypes.void_t.ptr, this.AudioUnit, this.AudioUnitPropertyID, this.AudioUnitScope, this.AudioUnitElement]).ptr;
    this.AUInputSamplesInOutputCallback = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [ctypes.void_t.ptr, this.AudioTimeStamp.ptr, this.Float64, this.Float64]).ptr;
    this.kAudioUnitRange = 0;
    this.kAudioUnitInitializeSelect = 1;
    this.kAudioUnitUninitializeSelect = 2;
    this.kAudioUnitGetPropertyInfoSelect = 3;
    this.kAudioUnitGetPropertySelect = 4;
    this.kAudioUnitSetPropertySelect = 5;
    this.kAudioUnitAddPropertyListenerSelect = 10;
    this.kAudioUnitRemovePropertyListenerSelect = 11;
    this.kAudioUnitRemovePropertyListenerWithUserDataSelect = 18;
    this.kAudioUnitAddRenderNotifySelect = 15;
    this.kAudioUnitRemoveRenderNotifySelect = 16;
    this.kAudioUnitGetParameterSelect = 6;
    this.kAudioUnitSetParameterSelect = 7;
    this.kAudioUnitScheduleParametersSelect = 17;
    this.kAudioUnitRenderSelect = 14;
    this.kAudioUnitResetSelect = 9;
    this.AudioUnitGetParameterProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.AudioUnitParameterID, this.AudioUnitScope, this.AudioUnitElement, this.AudioUnitParameterValue.ptr]).ptr;
    this.AudioUnitSetParameterProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.AudioUnitParameterID, this.AudioUnitScope, this.AudioUnitElement, this.AudioUnitParameterValue, this.UInt32]).ptr;
    this.AudioUnitRenderProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.AudioUnitRenderActionFlags.ptr, this.AudioTimeStamp.ptr, this.UInt32, this.UInt32, this.AudioBufferList.ptr]).ptr;
    this.kAudioUnitErr_IllegalInstrument = -10873;
    this.kAudioUnitErr_InstrumentTypeNotFound = -10872;
    this.kAudioUnitErr_UnknownFileType = -10870;
    this.kAudioUnitErr_FileNotSpecified = -10869;
}

// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/AudioUnitProperties.h
function AudioUnitProperties_h(lib) {
    CoreAudioTypes_h.call(this, lib);
    AUComponent_h.call(this, lib);
    CFURL_h.call(this, lib);
    CFBase_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._AUDIOUNITPROPERTIES_H)
        return;
    this._AUDIOUNITPROPERTIES_H = true;

    this.kAudioUnitScope_Global = 0;
    this.kAudioUnitScope_Input = 1;
    this.kAudioUnitScope_Output = 2;
    this.kAudioUnitScope_Group = 3;
    this.kAudioUnitScope_Part = 4;
    this.kAudioUnitScope_Note = 5;
    this.kAudioUnitProperty_ClassInfo = 0;
    this.kAudioUnitProperty_MakeConnection = 1;
    this.kAudioUnitProperty_SampleRate = 2;
    this.kAudioUnitProperty_ParameterList = 3;
    this.kAudioUnitProperty_ParameterInfo = 4;
    this.kAudioUnitProperty_StreamFormat = 8;
    this.kAudioUnitProperty_ElementCount = 11;
    this.kAudioUnitProperty_Latency = 12;
    this.kAudioUnitProperty_SupportedNumChannels = 13;
    this.kAudioUnitProperty_MaximumFramesPerSlice = 14;
    this.kAudioUnitProperty_AudioChannelLayout = 19;
    this.kAudioUnitProperty_TailTime = 20;
    this.kAudioUnitProperty_BypassEffect = 21;
    this.kAudioUnitProperty_LastRenderError = 22;
    this.kAudioUnitProperty_SetRenderCallback = 23;
    this.kAudioUnitProperty_FactoryPresets = 24;
    this.kAudioUnitProperty_RenderQuality = 26;
    this.kAudioUnitProperty_InPlaceProcessing = 29;
    this.kAudioUnitProperty_ElementName = 30;
    this.kAudioUnitProperty_SupportedChannelLayoutTags = 32;
    this.kAudioUnitProperty_PresentPreset = 36;
    this.kAudioUnitProperty_ShouldAllocateBuffer = 51;
    this.kAudioUnitProperty_FastDispatch = 5;
    this.kAudioUnitProperty_CPULoad = 6;
    this.kAudioUnitProperty_SetExternalBuffer = 15;
    this.kAudioUnitProperty_ParameterValueStrings = 16;
    this.kAudioUnitProperty_GetUIComponentList = 18;
    this.kAudioUnitProperty_ContextName = 25;
    this.kAudioUnitProperty_HostCallbacks = 27;
    this.kAudioUnitProperty_CocoaUI = 31;
    this.kAudioUnitProperty_ParameterIDName = 34;
    this.kAudioUnitProperty_ParameterClumpName = 35;
    this.kAudioUnitProperty_ParameterStringFromValue = 33;
    this.kAudioUnitProperty_OfflineRender = 37;
    this.kAudioUnitProperty_ParameterValueFromString = 38;
    this.kAudioUnitProperty_IconLocation = 39;
    this.kAudioUnitProperty_PresentationLatency = 40;
    this.kAudioUnitProperty_DependentParameters = 45;
    this.kAudioUnitProperty_AUHostIdentifier = 46;
    this.kAudioUnitProperty_MIDIOutputCallbackInfo = 47;
    this.kAudioUnitProperty_MIDIOutputCallback = 48;
    this.kAudioUnitProperty_InputSamplesInOutput = 49;
    this.kAudioUnitProperty_ClassInfoFromDocument = 50;
    this.kAudioUnitProperty_FrequencyResponse = 52;
    this.AudioUnitConnection = new ctypes.StructType("AudioUnitConnection", [{sourceAudioUnit: this.AudioUnit}, {sourceOutputNumber: this.UInt32}, {destInputNumber: this.UInt32}]);
    this.AUChannelInfo = new ctypes.StructType("AUChannelInfo", [{inChannels: this.SInt16}, {outChannels: this.SInt16}]);
    this.AudioUnitExternalBuffer = new ctypes.StructType("AudioUnitExternalBuffer", [{buffer: this.Byte.ptr}, {size: this.UInt32}]);
    this.AURenderCallbackStruct = new ctypes.StructType("AURenderCallbackStruct", [{inputProc: this.AURenderCallback}, {inputProcRefCon: ctypes.void_t.ptr}]);
    this.AUPreset = new ctypes.StructType("AUPreset", [{presetNumber: this.SInt32}, {presetName: this.CFStringRef}]);
    this.kRenderQuality_Max = 127;
    this.kRenderQuality_High = 96;
    this.kRenderQuality_Medium = 64;
    this.kRenderQuality_Low = 32;
    this.kRenderQuality_Min = 0;
    this.kNumberOfResponseFrequencies = 1024;
    this.AudioUnitFrequencyResponseBin = new ctypes.StructType("AudioUnitFrequencyResponseBin", [{mFrequency: this.Float64}, {mMagnitude: this.Float64}]);
    this.HostCallback_GetBeatAndTempo = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.Float64.ptr, this.Float64.ptr]).ptr;
    this.HostCallback_GetMusicalTimeLocation = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.UInt32.ptr, this.Float32.ptr, this.UInt32.ptr, this.Float64.ptr]).ptr;
    this.HostCallback_GetTransportState = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.Boolean.ptr, this.Boolean.ptr, this.Float64.ptr, this.Boolean.ptr, this.Float64.ptr, this.Float64.ptr]).ptr;
    this.HostCallbackInfo = new ctypes.StructType("HostCallbackInfo", [{hostUserData: ctypes.void_t.ptr}, {beatAndTempoProc: this.HostCallback_GetBeatAndTempo}, {musicalTimeLocationProc: this.HostCallback_GetMusicalTimeLocation}, {transportStateProc: this.HostCallback_GetTransportState}]);
    this.AudioUnitCocoaViewInfo = new ctypes.StructType("AudioUnitCocoaViewInfo", [{mCocoaAUViewBundleLocation: this.CFURLRef}, {mCocoaAUViewClass: this.CFStringRef.array(1)}]);
    this.AUDependentParameter = new ctypes.StructType("AUDependentParameter", [{mScope: this.AudioUnitScope}, {mParameterID: this.AudioUnitParameterID}]);
    this.AUHostVersionIdentifier = new ctypes.StructType("AUHostVersionIdentifier", [{hostName: this.CFStringRef}, {hostVersion: this.UInt32}]);
    this.MIDIPacketList = new ctypes.StructType("MIDIPacketList");
    this.AUMIDIOutputCallback = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.AudioTimeStamp.ptr, this.UInt32, this.MIDIPacketList.ptr]).ptr;
    this.AUMIDIOutputCallbackStruct = new ctypes.StructType("AUMIDIOutputCallbackStruct", [{midiOutputCallback: this.AUMIDIOutputCallback}, {userData: ctypes.void_t.ptr}]);
    this.AUInputSamplesInOutputCallbackStruct = new ctypes.StructType("AUInputSamplesInOutputCallbackStruct", [{inputToOutputCallback: this.AUInputSamplesInOutputCallback}, {userData: ctypes.void_t.ptr}]);
    this.kAudioUnitParameterUnit_Generic = 0;
    this.kAudioUnitParameterUnit_Indexed = 1;
    this.kAudioUnitParameterUnit_Boolean = 2;
    this.kAudioUnitParameterUnit_Percent = 3;
    this.kAudioUnitParameterUnit_Seconds = 4;
    this.kAudioUnitParameterUnit_SampleFrames = 5;
    this.kAudioUnitParameterUnit_Phase = 6;
    this.kAudioUnitParameterUnit_Rate = 7;
    this.kAudioUnitParameterUnit_Hertz = 8;
    this.kAudioUnitParameterUnit_Cents = 9;
    this.kAudioUnitParameterUnit_RelativeSemiTones = 10;
    this.kAudioUnitParameterUnit_MIDINoteNumber = 11;
    this.kAudioUnitParameterUnit_MIDIController = 12;
    this.kAudioUnitParameterUnit_Decibels = 13;
    this.kAudioUnitParameterUnit_LinearGain = 14;
    this.kAudioUnitParameterUnit_Degrees = 15;
    this.kAudioUnitParameterUnit_EqualPowerCrossfade = 16;
    this.kAudioUnitParameterUnit_MixerFaderCurve1 = 17;
    this.kAudioUnitParameterUnit_Pan = 18;
    this.kAudioUnitParameterUnit_Meters = 19;
    this.kAudioUnitParameterUnit_AbsoluteCents = 20;
    this.kAudioUnitParameterUnit_Octaves = 21;
    this.kAudioUnitParameterUnit_BPM = 22;
    this.kAudioUnitParameterUnit_Beats = 23;
    this.kAudioUnitParameterUnit_Milliseconds = 24;
    this.kAudioUnitParameterUnit_Ratio = 25;
    this.kAudioUnitParameterUnit_CustomUnit = 26;
    this.AudioUnitParameterUnit = this.UInt32;
    this.AudioUnitParameterInfo = new ctypes.StructType("AudioUnitParameterInfo", [{name: ctypes.char.array(52)}, {unitName: this.CFStringRef}, {clumpID: this.UInt32}, {cfNameString: this.CFStringRef}, {unit: this.AudioUnitParameterUnit}, {minValue: this.AudioUnitParameterValue}, {maxValue: this.AudioUnitParameterValue}, {defaultValue: this.AudioUnitParameterValue}, {flags: this.UInt32}]);
    this.kAudioUnitParameterFlag_CFNameRelease = 16;
    this.kAudioUnitParameterFlag_MeterReadOnly = 32768;
    this.kAudioUnitParameterFlag_DisplayMask = 4653056;
    this.kAudioUnitParameterFlag_DisplaySquareRoot = 65536;
    this.kAudioUnitParameterFlag_DisplaySquared = 131072;
    this.kAudioUnitParameterFlag_DisplayCubed = 196608;
    this.kAudioUnitParameterFlag_DisplayCubeRoot = 262144;
    this.kAudioUnitParameterFlag_DisplayExponential = 327680;
    this.kAudioUnitParameterFlag_HasClump = 1048576;
    this.kAudioUnitParameterFlag_ValuesHaveStrings = 2097152;
    this.kAudioUnitParameterFlag_DisplayLogarithmic = 4194304;
    this.kAudioUnitParameterFlag_IsHighResolution = 8388608;
    this.kAudioUnitParameterFlag_NonRealTime = 16777216;
    this.kAudioUnitParameterFlag_CanRamp = 33554432;
    this.kAudioUnitParameterFlag_ExpertMode = 67108864;
    this.kAudioUnitParameterFlag_HasCFNameString = 134217728;
    this.kAudioUnitParameterFlag_IsGlobalMeta = 268435456;
    this.kAudioUnitParameterFlag_IsElementMeta = 536870912;
    this.kAudioUnitParameterFlag_IsReadable = 1073741824;
    this.kAudioUnitParameterFlag_IsWritable = -2147483648;
    this.kAudioUnitClumpID_System = 0;
    this.kAudioUnitParameterName_Full = -1;
    this.AudioUnitParameterNameInfo = new ctypes.StructType("AudioUnitParameterNameInfo", [{inID: this.AudioUnitParameterID}, {inDesiredLength: this.SInt32}, {outName: this.CFStringRef}]);
    this.AudioUnitParameterIDName = this.AudioUnitParameterNameInfo;
    this.AudioUnitParameterStringFromValue = new ctypes.StructType("AudioUnitParameterStringFromValue", [{inParamID: this.AudioUnitParameterID}, {inValue: this.AudioUnitParameterValue.ptr}, {outString: this.CFStringRef}]);
    this.AudioUnitParameterValueFromString = new ctypes.StructType("AudioUnitParameterValueFromString", [{inParamID: this.AudioUnitParameterID}, {inString: this.CFStringRef}, {outValue: this.AudioUnitParameterValue}]);
    this.kAudioOutputUnitProperty_IsRunning = 2001;
    this.kAudioUnitProperty_AllParameterMIDIMappings = 41;
    this.kAudioUnitProperty_AddParameterMIDIMapping = 42;
    this.kAudioUnitProperty_RemoveParameterMIDIMapping = 43;
    this.kAudioUnitProperty_HotMapParameterMIDIMapping = 44;
    this.kAUParameterMIDIMapping_AnyChannelFlag = 1;
    this.kAUParameterMIDIMapping_AnyNoteFlag = 2;
    this.kAUParameterMIDIMapping_SubRange = 4;
    this.kAUParameterMIDIMapping_Toggle = 8;
    this.kAUParameterMIDIMapping_Bipolar = 16;
    this.kAUParameterMIDIMapping_Bipolar_On = 32;
    this.AUParameterMIDIMapping = new ctypes.StructType("AUParameterMIDIMapping", [{mScope: this.AudioUnitScope}, {mElement: this.AudioUnitElement}, {mParameterID: this.AudioUnitParameterID}, {mFlags: this.UInt32}, {mSubRangeMin: this.AudioUnitParameterValue}, {mSubRangeMax: this.AudioUnitParameterValue}, {mStatus: this.UInt8}, {mData1: this.UInt8}, {reserved1: this.UInt8}, {reserved2: this.UInt8}, {reserved3: this.UInt32}]);
    this.kMusicDeviceProperty_InstrumentCount = 1000;
    this.kMusicDeviceProperty_MIDIXMLNames = 1006;
    this.kMusicDeviceProperty_PartGroup = 1010;
    this.kMusicDeviceProperty_DualSchedulingMode = 1013;
    this.kMusicDeviceProperty_SupportsStartStopNote = 1014;
    this.kMusicDeviceSampleFrameMask_SampleOffset = 16777215;
    this.kMusicDeviceSampleFrameMask_IsScheduled = 16777216;
    this.kAudioUnitOfflineProperty_InputSize = 3020;
    this.kAudioUnitOfflineProperty_OutputSize = 3021;
    this.kAudioUnitOfflineProperty_StartOffset = 3022;
    this.kAudioUnitOfflineProperty_PreflightRequirements = 3023;
    this.kAudioUnitOfflineProperty_PreflightName = 3024;
    this.kOfflinePreflight_NotRequired = 0;
    this.kOfflinePreflight_Optional = 1;
    this.kOfflinePreflight_Required = 2;
    this.kAudioUnitProperty_DistanceAttenuationData = 3600;
    this.AUDistanceAttenuationData = new ctypes.StructType("AUDistanceAttenuationData", []);
    this.kAudioUnitMigrateProperty_FromPlugin = 4000;
    this.kAudioUnitMigrateProperty_OldAutomation = 4001;
    this.kOtherPluginFormat_Undefined = 0;
    this.kOtherPluginFormat_kMAS = 1;
    this.kOtherPluginFormat_kVST = 2;
    this.kOtherPluginFormat_AU = 3;
    this.AudioUnitOtherPluginDesc = new ctypes.StructType("AudioUnitOtherPluginDesc", [{format: this.UInt32}, {plugin: this.AudioClassDescription}]);
    this.AudioUnitParameterValueTranslation = new ctypes.StructType("AudioUnitParameterValueTranslation", [{otherDesc: this.AudioUnitOtherPluginDesc}, {otherParamID: this.UInt32}, {otherValue: this.Float32}, {auParamID: this.AudioUnitParameterID}, {auValue: this.AudioUnitParameterValue}]);
    this.AudioUnitPresetMAS_SettingData = new ctypes.StructType("AudioUnitPresetMAS_SettingData", [{isStockSetting: this.UInt32}, {settingID: this.UInt32}, {dataLen: this.UInt32}, {data: this.UInt8.array(1)}]);
    this.AudioUnitPresetMAS_Settings = new ctypes.StructType("AudioUnitPresetMAS_Settings", [{manufacturerID: this.UInt32}, {effectID: this.UInt32}, {variantID: this.UInt32}, {settingsVersion: this.UInt32}, {numberOfSettings: this.UInt32}, {settings: this.AudioUnitPresetMAS_SettingData.array(1)}]);
    this.kAudioUnitProperty_SampleRateConverterComplexity = 3014;
    this.kAudioUnitSampleRateConverterComplexity_Linear = 1818848869;
    this.kAudioUnitSampleRateConverterComplexity_Normal = 1852797549;
    this.kAudioUnitSampleRateConverterComplexity_Mastering = 1650553971;
    this.kAudioOutputUnitProperty_CurrentDevice = 2000;
    this.kAudioOutputUnitProperty_ChannelMap = 2002;
    this.kAudioOutputUnitProperty_EnableIO = 2003;
    this.kAudioOutputUnitProperty_StartTime = 2004;
    this.kAudioOutputUnitProperty_SetInputCallback = 2005;
    this.kAudioOutputUnitProperty_HasIO = 2006;
    this.kAudioOutputUnitProperty_StartTimestampsAtZero = 2007;
    this.AudioOutputUnitStartAtTimeParams = new ctypes.StructType("AudioOutputUnitStartAtTimeParams", [{mTimestamp: this.AudioTimeStamp}, {mFlags: this.UInt32}]);
    this.kAudioUnitProperty_MeteringMode = 3007;
    this.kAudioUnitProperty_MatrixLevels = 3006;
    this.kAudioUnitProperty_MatrixDimensions = 3009;
    this.kAudioUnitProperty_MeterClipping = 3011;
    this.AudioUnitMeterClipping = new ctypes.StructType("AudioUnitMeterClipping", [{peakValueSinceLastCall: this.Float32}, {sawInfinity: this.Boolean}, {sawNotANumber: this.Boolean}]);
    this.kAudioUnitProperty_3DMixerDistanceParams = 3010;
    this.kAudioUnitProperty_3DMixerAttenuationCurve = 3013;
    this.kAudioUnitProperty_SpatializationAlgorithm = 3000;
    this.kAudioUnitProperty_DopplerShift = 3002;
    this.kAudioUnitProperty_3DMixerRenderingFlags = 3003;
    this.kAudioUnitProperty_3DMixerDistanceAtten = 3004;
    this.kAudioUnitProperty_ReverbPreset = 3012;
    this.k3DMixerAttenuationCurve_Power = 0;
    this.k3DMixerAttenuationCurve_Exponential = 1;
    this.k3DMixerAttenuationCurve_Inverse = 2;
    this.k3DMixerAttenuationCurve_Linear = 3;
    this.MixerDistanceParams = new ctypes.StructType("MixerDistanceParams", [{mReferenceDistance: this.Float32}, {mMaxDistance: this.Float32}, {mMaxAttenuation: this.Float32}]);
    this.kSpatializationAlgorithm_EqualPowerPanning = 0;
    this.kSpatializationAlgorithm_SphericalHead = 1;
    this.kSpatializationAlgorithm_HRTF = 2;
    this.kSpatializationAlgorithm_SoundField = 3;
    this.kSpatializationAlgorithm_VectorBasedPanning = 4;
    this.kSpatializationAlgorithm_StereoPassThrough = 5;
    this.k3DMixerRenderingFlags_InterAuralDelay = 1;
    this.k3DMixerRenderingFlags_DopplerShift = 2;
    this.k3DMixerRenderingFlags_DistanceAttenuation = 4;
    this.k3DMixerRenderingFlags_DistanceFilter = 8;
    this.k3DMixerRenderingFlags_DistanceDiffusion = 16;
    this.k3DMixerRenderingFlags_LinearDistanceAttenuation = 32;
    this.k3DMixerRenderingFlags_ConstantReverbBlend = 64;
    this.kAudioUnitProperty_ReverbRoomType = 10;
    this.kAudioUnitProperty_UsesInternalReverb = 1005;
    this.kMusicDeviceProperty_InstrumentName = 1001;
    this.kMusicDeviceProperty_InstrumentNumber = 1004;
    this.kMusicDeviceProperty_UsesInternalReverb = 1005;
    this.kMusicDeviceProperty_BankName = 1007;
    this.kMusicDeviceProperty_SoundBankData = 1008;
    this.kMusicDeviceProperty_StreamFromDisk = 1011;
    this.kMusicDeviceProperty_SoundBankFSRef = 1012;
    this.kMusicDeviceProperty_SoundBankURL = 1100;
    this.kReverbRoomType_SmallRoom = 0;
    this.kReverbRoomType_MediumRoom = 1;
    this.kReverbRoomType_LargeRoom = 2;
    this.kReverbRoomType_MediumHall = 3;
    this.kReverbRoomType_LargeHall = 4;
    this.kReverbRoomType_Plate = 5;
    this.kReverbRoomType_MediumChamber = 6;
    this.kReverbRoomType_LargeChamber = 7;
    this.kReverbRoomType_Cathedral = 8;
    this.kReverbRoomType_LargeRoom2 = 9;
    this.kReverbRoomType_MediumHall2 = 10;
    this.kReverbRoomType_MediumHall3 = 11;
    this.kReverbRoomType_LargeHall2 = 12;
    this.kAudioUnitProperty_ScheduleAudioSlice = 3300;
    this.kAudioUnitProperty_ScheduleStartTimeStamp = 3301;
    this.kAudioUnitProperty_CurrentPlayTime = 3302;
    this.kScheduledAudioSliceFlag_Complete = 1;
    this.kScheduledAudioSliceFlag_BeganToRender = 2;
    this.kScheduledAudioSliceFlag_BeganToRenderLate = 4;
    this.ScheduledAudioSlice = new ctypes.StructType("ScheduledAudioSlice");
    this.ScheduledAudioSliceCompletionProc = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [ctypes.void_t.ptr, this.ScheduledAudioSlice.ptr]).ptr;
    this.ScheduledAudioSlice = new ctypes.StructType("ScheduledAudioSlice", [{mTimeStamp: this.AudioTimeStamp}, {mCompletionProc: this.ScheduledAudioSliceCompletionProc}, {mCompletionProcUserData: ctypes.void_t.ptr}, {mFlags: this.UInt32}, {mReserved: this.UInt32}, {mReserved2: ctypes.void_t.ptr}, {mNumberFrames: this.UInt32}, {mBufferList: this.AudioBufferList.ptr}]);
    this.kAudioUnitProperty_ScheduledFileIDs = 3310;
    this.kAudioUnitProperty_ScheduledFileRegion = 3311;
    this.kAudioUnitProperty_ScheduledFilePrime = 3312;
    this.kAudioUnitProperty_ScheduledFileBufferSizeFrames = 3313;
    this.kAudioUnitProperty_ScheduledFileNumberBuffers = 3314;
    this.ScheduledAudioFileRegion = new ctypes.StructType("ScheduledAudioFileRegion");
    this.ScheduledAudioFileRegionCompletionProc = new ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, [ctypes.void_t.ptr, this.ScheduledAudioFileRegion.ptr, this.OSStatus]).ptr;
    this.OpaqueAudioFileID = new ctypes.StructType("OpaqueAudioFileID");
    this.ScheduledAudioFileRegion = new ctypes.StructType("ScheduledAudioFileRegion", [{mTimeStamp: this.AudioTimeStamp}, {mCompletionProc: this.ScheduledAudioFileRegionCompletionProc}, {mCompletionProcUserData: ctypes.void_t.ptr}, {mAudioFile: this.OpaqueAudioFileID.ptr}, {mLoopCount: this.UInt32}, {mStartFrame: this.SInt64}, {mFramesToPlay: this.UInt32}]);
    this.kAudioUnitProperty_DeferredRendererPullSize = 3320;
    this.kAudioUnitProperty_DeferredRendererExtraLatency = 3321;
    this.kAudioUnitProperty_DeferredRendererWaitFrames = 3322;
    this.kAUNetReceiveProperty_Hostname = 3511;
    this.kAUNetReceiveProperty_Password = 3512;
    this.kAUNetSendProperty_PortNum = 3513;
    this.kAUNetSendProperty_TransmissionFormat = 3514;
    this.kAUNetSendProperty_TransmissionFormatIndex = 3515;
    this.kAUNetSendProperty_ServiceName = 3516;
    this.kAUNetSendProperty_Disconnect = 3517;
    this.kAUNetSendProperty_Password = 3518;
    this.kAUNetSendPresetFormat_PCMFloat32 = 0;
    this.kAUNetSendPresetFormat_PCMInt24 = 1;
    this.kAUNetSendPresetFormat_PCMInt16 = 2;
    this.kAUNetSendPresetFormat_Lossless24 = 3;
    this.kAUNetSendPresetFormat_Lossless16 = 4;
    this.kAUNetSendPresetFormat_ULaw = 5;
    this.kAUNetSendPresetFormat_IMA4 = 6;
    this.kAUNetSendPresetFormat_AAC_128kbpspc = 7;
    this.kAUNetSendPresetFormat_AAC_96kbpspc = 8;
    this.kAUNetSendPresetFormat_AAC_80kbpspc = 9;
    this.kAUNetSendPresetFormat_AAC_64kbpspc = 10;
    this.kAUNetSendPresetFormat_AAC_48kbpspc = 11;
    this.kAUNetSendPresetFormat_AAC_40kbpspc = 12;
    this.kAUNetSendPresetFormat_AAC_32kbpspc = 13;
    this.kAUNetSendPresetFormat_AAC_LD_64kbpspc = 14;
    this.kAUNetSendPresetFormat_AAC_LD_48kbpspc = 15;
    this.kAUNetSendPresetFormat_AAC_LD_40kbpspc = 16;
    this.kAUNetSendPresetFormat_AAC_LD_32kbpspc = 17;
    this.kAUNetSendNumPresetFormats = 18;
    this.AUNumVersion = new ctypes.StructType("AUNumVersion", [{nonRelRev: this.UInt8}, {stage: this.UInt8}, {minorAndBugRev: this.UInt8}, {majorRev: this.UInt8}]);
    this.AUHostIdentifier = new ctypes.StructType("AUHostIdentifier", [{hostName: this.CFStringRef}, {hostVersion: this.AUNumVersion}]);
    this.kAudioUnitParameterFlag_Global = 1;
    this.kAudioUnitParameterFlag_Input = 2;
    this.kAudioUnitParameterFlag_Output = 4;
    this.kAudioUnitParameterFlag_Group = 8;
    this.kAudioUnitParameterFlag_HasName = 2097152;
    this.kAudioUnitProperty_SRCAlgorithm = 9;
    this.kAudioUnitProperty_MIDIControlMapping = 17;
    this.kAudioUnitProperty_CurrentPreset = 28;
    this.kAudioUnitProperty_ParameterValueName = 33;
    this.kAudioUnitProperty_BusCount = 11;
    this.kAudioOfflineUnitProperty_InputSize = 3020;
    this.kAudioOfflineUnitProperty_OutputSize = 3021;
    this.kAudioUnitSRCAlgorithm_Polyphase = 1886350457;
    this.kAudioUnitSRCAlgorithm_MediumQuality = 1668510307;
    this.AudioUnitMIDIControlMapping = new ctypes.StructType("AudioUnitMIDIControlMapping", [{midiNRPN: this.UInt16}, {midiControl: this.UInt8}, {scope: this.UInt8}, {element: this.AudioUnitElement}, {parameter: this.AudioUnitParameterID}]);
    this.AudioUnitParameterValueName = new ctypes.StructType("AudioUnitParameterValueName", [{inParamID: this.AudioUnitParameterID}, {inValue: this.Float32.ptr}, {outName: this.CFStringRef}]);
    this.kMusicDeviceProperty_GroupOutputBus = 1002;
    this.kMusicDeviceProperty_SoundBankFSSpec = 1003;
    this.kAudioUnitProperty_PannerMode = 3008;
    this.kAudioUnitProperty_SpeakerConfiguration = 3001;
    this.kSpeakerConfiguration_HeadPhones = 0;
    this.kSpeakerConfiguration_Stereo = 1;
    this.kSpeakerConfiguration_Quad = 2;
    this.kSpeakerConfiguration_5_0 = 3;
    this.kSpeakerConfiguration_5_1 = 3;
}

// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/AudioCodec.h
function AudioCodec_h(lib) {
    AudioComponent_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._AUDIOCODEC_H)
        return;
    this._AUDIOCODEC_H = true;

    this.AudioCodec = this.AudioComponentInstance;
    this.AudioCodecPropertyID = this.UInt32;
    this.AudioCodecMagicCookieInfo = new ctypes.StructType("AudioCodecMagicCookieInfo", [{mMagicCookieSize: this.UInt32}, {mMagicCookie: ctypes.void_t.ptr}]);
    this.kAudioDecoderComponentType = 1633969507;
    this.kAudioEncoderComponentType = 1634037347;
    this.kAudioUnityCodecComponentType = 1633903715;
    this.kAudioCodecPropertyNameCFString = 1819173229;
    this.kAudioCodecPropertyManufacturerCFString = 1819107691;
    this.kAudioCodecPropertyFormatCFString = 1818652530;
    this.kAudioCodecPropertyHasVariablePacketByteSizes = 1987078975;
    this.kAudioCodecPropertySupportedInputFormats = 1768320291;
    this.kAudioCodecPropertySupportedOutputFormats = 1868983587;
    this.kAudioCodecPropertyAvailableInputSampleRates = 1634300786;
    this.kAudioCodecPropertyAvailableOutputSampleRates = 1634694002;
    this.kAudioCodecPropertyAvailableBitRateRange = 1633841780;
    this.kAudioCodecPropertyMinimumNumberInputPackets = 1835952496;
    this.kAudioCodecPropertyMinimumNumberOutputPackets = 1835954032;
    this.kAudioCodecPropertyAvailableNumberChannels = 1668116067;
    this.kAudioCodecPropertyDoesSampleRateConversion = 1819112035;
    this.kAudioCodecPropertyAvailableInputChannelLayoutTags = 1634296684;
    this.kAudioCodecPropertyAvailableOutputChannelLayoutTags = 1634689900;
    this.kAudioCodecPropertyInputFormatsForOutputFormat = 1768305775;
    this.kAudioCodecPropertyOutputFormatsForInputFormat = 1868969065;
    this.kAudioCodecPropertyFormatInfo = 1633904233;
    this.kAudioCodecPropertyInputBufferSize = 1952609638;
    this.kAudioCodecPropertyPacketFrameSize = 1885432678;
    this.kAudioCodecPropertyMaximumPacketByteSize = 1885432674;
    this.kAudioCodecPropertyCurrentInputFormat = 1768320372;
    this.kAudioCodecPropertyCurrentOutputFormat = 1868983668;
    this.kAudioCodecPropertyMagicCookie = 1802857321;
    this.kAudioCodecPropertyUsedInputBufferSize = 1969386854;
    this.kAudioCodecPropertyIsInitialized = 1768843636;
    this.kAudioCodecPropertyCurrentTargetBitRate = 1651663220;
    this.kAudioCodecPropertyCurrentInputSampleRate = 1667855218;
    this.kAudioCodecPropertyCurrentOutputSampleRate = 1668248434;
    this.kAudioCodecPropertyQualitySetting = 1936876401;
    this.kAudioCodecPropertyApplicableBitRateRange = 1651668065;
    this.kAudioCodecPropertyApplicableInputSampleRates = 1769173601;
    this.kAudioCodecPropertyApplicableOutputSampleRates = 1869836897;
    this.kAudioCodecPropertyPaddedZeros = 1885430832;
    this.kAudioCodecPropertyPrimeMethod = 1886547309;
    this.kAudioCodecPropertyPrimeInfo = 1886546285;
    this.kAudioCodecPropertyCurrentInputChannelLayout = 1768123424;
    this.kAudioCodecPropertyCurrentOutputChannelLayout = 1868786720;
    this.kAudioCodecPropertySettings = 1633907488;
    this.kAudioCodecPropertyFormatList = 1633904236;
    this.kAudioCodecPropertyBitRateControlMode = 1633903206;
    this.kAudioCodecPropertySoundQualityForVBR = 1986163313;
    this.kAudioCodecPropertyMinimumDelayMode = 1835296108;
    this.kAudioCodecQuality_Max = 127;
    this.kAudioCodecQuality_High = 96;
    this.kAudioCodecQuality_Medium = 64;
    this.kAudioCodecQuality_Low = 32;
    this.kAudioCodecQuality_Min = 0;
    this.kAudioCodecPrimeMethod_Pre = 0;
    this.kAudioCodecPrimeMethod_Normal = 1;
    this.kAudioCodecPrimeMethod_None = 2;
    this.kAudioCodecBitRateControlMode_Constant = 0;
    this.kAudioCodecBitRateControlMode_LongTermAverage = 1;
    this.kAudioCodecBitRateControlMode_VariableConstrained = 2;
    this.kAudioCodecBitRateControlMode_Variable = 3;
    this.AudioCodecPrimeInfo = new ctypes.StructType("AudioCodecPrimeInfo", [{leadingFrames: this.UInt32}, {trailingFrames: this.UInt32}]);
    this.kAudioSettingsFlags_ExpertParameter = 1;
    this.kAudioSettingsFlags_InvisibleParameter = 2;
    this.kAudioSettingsFlags_MetaParameter = 4;
    this.kAudioSettingsFlags_UserInterfaceParameter = 8;
    this.kAudioCodecProduceOutputPacketFailure = 1;
    this.kAudioCodecProduceOutputPacketSuccess = 2;
    this.kAudioCodecProduceOutputPacketSuccessHasMore = 3;
    this.kAudioCodecProduceOutputPacketNeedsMoreInputData = 4;
    this.kAudioCodecProduceOutputPacketAtEOF = 5;
    this.kAudioCodecGetPropertyInfoSelect = 1;
    this.kAudioCodecGetPropertySelect = 2;
    this.kAudioCodecSetPropertySelect = 3;
    this.kAudioCodecInitializeSelect = 4;
    this.kAudioCodecUninitializeSelect = 5;
    this.kAudioCodecAppendInputDataSelect = 6;
    this.kAudioCodecProduceOutputDataSelect = 7;
    this.kAudioCodecResetSelect = 8;
    this.kAudioCodecNoError = 0;
    this.kAudioCodecUnspecifiedError = 2003329396;
    this.kAudioCodecUnknownPropertyError = 2003332927;
    this.kAudioCodecBadPropertySizeError = 561211770;
    this.kAudioCodecIllegalOperationError = 1852797029;
    this.kAudioCodecUnsupportedFormatError = 560226676;
    this.kAudioCodecStateError = 561214580;
    this.kAudioCodecNotEnoughBufferSpaceError = 560100710;
    this.kAudioCodecPropertyRequiresPacketDescription = 1885432676;
    this.kAudioCodecPropertyAvailableBitRates = 1651668003;
    this.kAudioCodecExtendFrequencies = 1633903974;
    this.kAudioCodecUseRecommendedSampleRate = 1970434930;
    this.kAudioCodecOutputPrecedence = 1869639794;
    this.kAudioCodecBitRateFormat = 1633903206;
    this.kAudioCodecDoesSampleRateConversion = 1819112035;
    this.kAudioCodecInputFormatsForOutputFormat = 1768305775;
    this.kAudioCodecOutputFormatsForInputFormat = 1868969065;
    this.kAudioCodecPropertyInputChannelLayout = 1768123424;
    this.kAudioCodecPropertyOutputChannelLayout = 1868786720;
    this.kAudioCodecPropertyAvailableInputChannelLayouts = 1634296684;
    this.kAudioCodecPropertyAvailableOutputChannelLayouts = 1634689900;
    this.kAudioCodecPropertyZeroFramesPadded = 1885430832;
    this.kAudioCodecBitRateFormat_CBR = 0;
    this.kAudioCodecBitRateFormat_ABR = 1;
    this.kAudioCodecBitRateFormat_VBR = 2;
    this.kAudioCodecOutputPrecedenceNone = 0;
    this.kAudioCodecOutputPrecedenceBitRate = 1;
    this.kAudioCodecOutputPrecedenceSampleRate = 2;
    this.MagicCookieInfo = this.AudioCodecMagicCookieInfo;
    this.kHintBasic = 0;
    this.kHintAdvanced = 1;
    this.kHintHidden = 2;
}

// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/MusicDevice.h
function MusicDevice_h(lib) {
    AudioComponent_h.call(this, lib);
    AUComponent_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._MUSICDEVICE_H)
        return;
    this._MUSICDEVICE_H = true;

    this.MusicDeviceInstrumentID = this.UInt32;
    this.MusicDeviceStdNoteParams = new ctypes.StructType("MusicDeviceStdNoteParams", [{argCount: this.UInt32}, {mPitch: this.Float32}, {mVelocity: this.Float32}]);
    this.NoteParamsControlValue = new ctypes.StructType("NoteParamsControlValue", [{mID: this.AudioUnitParameterID}, {mValue: this.AudioUnitParameterValue}]);
    this.MusicDeviceNoteParams = new ctypes.StructType("MusicDeviceNoteParams", [{argCount: this.UInt32}, {mPitch: this.Float32}, {mVelocity: this.Float32}, {mControls: this.NoteParamsControlValue.array(1)}]);
    this.kMusicNoteEvent_UseGroupInstrument = -1;
    this.kMusicNoteEvent_Unused = -1;
    this.MusicDeviceGroupID = this.UInt32;
    this.NoteInstanceID = this.UInt32;
    this.MusicDeviceComponent = this.AudioComponentInstance;
    this.kMusicDeviceRange = 256;
    this.kMusicDeviceMIDIEventSelect = 257;
    this.kMusicDeviceSysExSelect = 258;
    this.kMusicDevicePrepareInstrumentSelect = 259;
    this.kMusicDeviceReleaseInstrumentSelect = 260;
    this.kMusicDeviceStartNoteSelect = 261;
    this.kMusicDeviceStopNoteSelect = 262;
    this.MusicDeviceMIDIEventProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.UInt32, this.UInt32, this.UInt32, this.UInt32]).ptr;
    this.MusicDeviceSysExProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.UInt8.ptr, this.UInt32]).ptr;
    this.MusicDeviceStartNoteProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.MusicDeviceInstrumentID, this.MusicDeviceGroupID, this.NoteInstanceID.ptr, this.UInt32, this.MusicDeviceNoteParams.ptr]).ptr;
    this.MusicDeviceStopNoteProc = new ctypes.FunctionType(ctypes.default_abi, this.OSStatus, [ctypes.void_t.ptr, this.MusicDeviceGroupID, this.NoteInstanceID, this.UInt32]).ptr;
}

// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/AudioOutputUnit.h
function AudioOutputUnit_h(lib) {

    if (this._AUDIOOUTPUTUNIT_H)
        return;
    this._AUDIOOUTPUTUNIT_H = true;

    this.kAudioOutputUnitRange = 512;
    this.kAudioOutputUnitStartSelect = 513;
    this.kAudioOutputUnitStopSelect = 514;
}

// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/AudioComponent.h
function AudioComponent_h(lib) {
    Components_h.call(this, lib);
    MacTypes_h.call(this, lib);

    if (this._AUDIOCOMPONENT_H)
        return;
    this._AUDIOCOMPONENT_H = true;

    this.AudioComponentDescription = new ctypes.StructType("AudioComponentDescription", [{componentType: this.OSType}, {componentSubType: this.OSType}, {componentManufacturer: this.OSType}, {componentFlags: this.UInt32}, {componentFlagsMask: this.UInt32}]);
    this.OpaqueAudioComponent = new ctypes.StructType("OpaqueAudioComponent");
    this.AudioComponent = this.OpaqueAudioComponent.ptr;
    this.AudioComponentInstance = this.ComponentInstanceRecord.ptr;
}

// Based on /System/Library/Frameworks/AudioUnit.framework/Headers/AudioUnitParameters.h
function AudioUnitParameters_h(lib) {

    if (this._AUDIOUNITPARAMETERS_H)
        return;
    this._AUDIOUNITPARAMETERS_H = true;

    this.kAUGroupParameterID_Volume = 7;
    this.kAUGroupParameterID_Sustain = 64;
    this.kAUGroupParameterID_AllNotesOff = 123;
    this.kAUGroupParameterID_ModWheel = 1;
    this.kAUGroupParameterID_PitchBend = 224;
    this.kAUGroupParameterID_AllSoundOff = 120;
    this.kAUGroupParameterID_ResetAllControllers = 121;
    this.kAUGroupParameterID_Pan = 10;
    this.kAUGroupParameterID_Foot = 4;
    this.kAUGroupParameterID_ChannelPressure = 208;
    this.kAUGroupParameterID_KeyPressure = 160;
    this.kAUGroupParameterID_Expression = 11;
    this.kAUGroupParameterID_DataEntry = 6;
    this.kAUGroupParameterID_Volume_LSB = 39;
    this.kAUGroupParameterID_ModWheel_LSB = 33;
    this.kAUGroupParameterID_Pan_LSB = 42;
    this.kAUGroupParameterID_Foot_LSB = 36;
    this.kAUGroupParameterID_Expression_LSB = 43;
    this.kAUGroupParameterID_DataEntry_LSB = 38;
    this.kAUGroupParameterID_KeyPressure_FirstKey = 256;
    this.kAUGroupParameterID_KeyPressure_LastKey = 383;
    this.kPannerParam_Gain = 0;
    this.kPannerParam_Azimuth = 1;
    this.kPannerParam_Elevation = 2;
    this.kPannerParam_Distance = 3;
    this.kPannerParam_CoordScale = 4;
    this.kPannerParam_RefDistance = 5;
    this.k3DMixerParam_Azimuth = 0;
    this.k3DMixerParam_Elevation = 1;
    this.k3DMixerParam_Distance = 2;
    this.k3DMixerParam_Gain = 3;
    this.k3DMixerParam_PlaybackRate = 4;
    this.kMultiChannelMixerParam_Volume = 0;
    this.kMultiChannelMixerParam_Enable = 1;
    this.kMultiChannelMixerParam_PreAveragePower = 1000;
    this.kMultiChannelMixerParam_PrePeakHoldLevel = 2000;
    this.kMultiChannelMixerParam_PostAveragePower = 3000;
    this.kMultiChannelMixerParam_PostPeakHoldLevel = 4000;
    this.kHALOutputParam_Volume = 14;
    this.kTimePitchParam_Rate = 0;
    this.kTimePitchParam_Pitch = 1;
    this.kTimePitchParam_EffectBlend = 2;
    this.k3DMixerParam_ReverbBlend = 5;
    this.k3DMixerParam_GlobalReverbGain = 6;
    this.k3DMixerParam_OcclusionAttenuation = 7;
    this.k3DMixerParam_ObstructionAttenuation = 8;
    this.k3DMixerParam_PreAveragePower = 1000;
    this.k3DMixerParam_PrePeakHoldLevel = 2000;
    this.k3DMixerParam_PostAveragePower = 3000;
    this.k3DMixerParam_PostPeakHoldLevel = 4000;
    this.kBandpassParam_CenterFrequency = 0;
    this.kBandpassParam_Bandwidth = 1;
    this.kGraphicEQParam_NumberOfBands = 10000;
    this.kHipassParam_CutoffFrequency = 0;
    this.kHipassParam_Resonance = 1;
    this.kLowPassParam_CutoffFrequency = 0;
    this.kLowPassParam_Resonance = 1;
    this.kHighShelfParam_CutOffFrequency = 0;
    this.kHighShelfParam_Gain = 1;
    this.kAULowShelfParam_CutoffFrequency = 0;
    this.kAULowShelfParam_Gain = 1;
    this.kParametricEQParam_CenterFreq = 0;
    this.kParametricEQParam_Q = 1;
    this.kParametricEQParam_Gain = 2;
    this.kReverbParam_DryWetMix = 0;
    this.kReverbParam_SmallLargeMix = 1;
    this.kReverbParam_SmallSize = 2;
    this.kReverbParam_LargeSize = 3;
    this.kReverbParam_PreDelay = 4;
    this.kReverbParam_LargeDelay = 5;
    this.kReverbParam_SmallDensity = 6;
    this.kReverbParam_LargeDensity = 7;
    this.kReverbParam_LargeDelayRange = 8;
    this.kReverbParam_SmallBrightness = 9;
    this.kReverbParam_LargeBrightness = 10;
    this.kReverbParam_SmallDelayRange = 11;
    this.kReverbParam_ModulationRate = 12;
    this.kReverbParam_ModulationDepth = 13;
    this.kReverbParam_FilterFrequency = 14;
    this.kReverbParam_FilterBandwidth = 15;
    this.kReverbParam_FilterGain = 16;
    this.kDelayParam_WetDryMix = 0;
    this.kDelayParam_DelayTime = 1;
    this.kDelayParam_Feedback = 2;
    this.kDelayParam_LopassCutoff = 3;
    this.kLimiterParam_AttackTime = 0;
    this.kLimiterParam_DecayTime = 1;
    this.kLimiterParam_PreGain = 2;
    this.kDynamicsProcessorParam_Threshold = 0;
    this.kDynamicsProcessorParam_HeadRoom = 1;
    this.kDynamicsProcessorParam_ExpansionRatio = 2;
    this.kDynamicsProcessorParam_ExpansionThreshold = 3;
    this.kDynamicsProcessorParam_AttackTime = 4;
    this.kDynamicsProcessorParam_ReleaseTime = 5;
    this.kDynamicsProcessorParam_MasterGain = 6;
    this.kDynamicsProcessorParam_CompressionAmount = 1000;
    this.kDynamicsProcessorParam_InputAmplitude = 2000;
    this.kDynamicsProcessorParam_OutputAmplitude = 3000;
    this.kMultibandCompressorParam_Pregain = 0;
    this.kMultibandCompressorParam_Postgain = 1;
    this.kMultibandCompressorParam_Crossover1 = 2;
    this.kMultibandCompressorParam_Crossover2 = 3;
    this.kMultibandCompressorParam_Crossover3 = 4;
    this.kMultibandCompressorParam_Threshold1 = 5;
    this.kMultibandCompressorParam_Threshold2 = 6;
    this.kMultibandCompressorParam_Threshold3 = 7;
    this.kMultibandCompressorParam_Threshold4 = 8;
    this.kMultibandCompressorParam_Headroom1 = 9;
    this.kMultibandCompressorParam_Headroom2 = 10;
    this.kMultibandCompressorParam_Headroom3 = 11;
    this.kMultibandCompressorParam_Headroom4 = 12;
    this.kMultibandCompressorParam_AttackTime = 13;
    this.kMultibandCompressorParam_ReleaseTime = 14;
    this.kMultibandCompressorParam_EQ1 = 15;
    this.kMultibandCompressorParam_EQ2 = 16;
    this.kMultibandCompressorParam_EQ3 = 17;
    this.kMultibandCompressorParam_EQ4 = 18;
    this.kMultibandCompressorParam_CompressionAmount1 = 1000;
    this.kMultibandCompressorParam_CompressionAmount2 = 2000;
    this.kMultibandCompressorParam_CompressionAmount3 = 3000;
    this.kMultibandCompressorParam_CompressionAmount4 = 4000;
    this.kMultibandCompressorParam_InputAmplitude1 = 5000;
    this.kMultibandCompressorParam_InputAmplitude2 = 6000;
    this.kMultibandCompressorParam_InputAmplitude3 = 7000;
    this.kMultibandCompressorParam_InputAmplitude4 = 8000;
    this.kMultibandCompressorParam_OutputAmplitude1 = 9000;
    this.kMultibandCompressorParam_OutputAmplitude2 = 10000;
    this.kMultibandCompressorParam_OutputAmplitude3 = 11000;
    this.kMultibandCompressorParam_OutputAmplitude4 = 12000;
    this.kVarispeedParam_PlaybackRate = 0;
    this.kVarispeedParam_PlaybackCents = 1;
    this.kMultibandFilter_LowFilterType = 0;
    this.kMultibandFilter_LowFrequency = 1;
    this.kMultibandFilter_LowGain = 2;
    this.kMultibandFilter_CenterFreq1 = 3;
    this.kMultibandFilter_CenterGain1 = 4;
    this.kMultibandFilter_Bandwidth1 = 5;
    this.kMultibandFilter_CenterFreq2 = 6;
    this.kMultibandFilter_CenterGain2 = 7;
    this.kMultibandFilter_Bandwidth2 = 8;
    this.kMultibandFilter_CenterFreq3 = 9;
    this.kMultibandFilter_CenterGain3 = 10;
    this.kMultibandFilter_Bandwidth3 = 11;
    this.kMultibandFilter_HighFilterType = 12;
    this.kMultibandFilter_HighFrequency = 13;
    this.kMultibandFilter_HighGain = 14;
    this.kStereoMixerParam_Volume = 0;
    this.kStereoMixerParam_Pan = 1;
    this.kStereoMixerParam_PreAveragePower = 1000;
    this.kStereoMixerParam_PrePeakHoldLevel = 2000;
    this.kStereoMixerParam_PostAveragePower = 3000;
    this.kStereoMixerParam_PostPeakHoldLevel = 4000;
    this.kMatrixMixerParam_Volume = 0;
    this.kMatrixMixerParam_Enable = 1;
    this.kMatrixMixerParam_PreAveragePower = 1000;
    this.kMatrixMixerParam_PrePeakHoldLevel = 2000;
    this.kMatrixMixerParam_PostAveragePower = 3000;
    this.kMatrixMixerParam_PostPeakHoldLevel = 4000;
    this.kMatrixMixerParam_PreAveragePowerLinear = 5000;
    this.kMatrixMixerParam_PrePeakHoldLevelLinear = 6000;
    this.kMatrixMixerParam_PostAveragePowerLinear = 7000;
    this.kMatrixMixerParam_PostPeakHoldLevelLinear = 8000;
    this.kAUNetReceiveParam_Status = 0;
    this.kAUNetReceiveParam_NumParameters = 1;
    this.kAUNetSendParam_Status = 0;
    this.kAUNetSendParam_NumParameters = 1;
    this.kAUNetStatus_NotConnected = 0;
    this.kAUNetStatus_Connected = 1;
    this.kAUNetStatus_Overflow = 2;
    this.kAUNetStatus_Underflow = 3;
    this.kAUNetStatus_Connecting = 4;
    this.kAUNetStatus_Listening = 5;
    this.kDistortionParam_Delay = 0;
    this.kDistortionParam_Decay = 1;
    this.kDistortionParam_DelayMix = 2;
    this.kDistortionParam_Decimation = 3;
    this.kDistortionParam_Rounding = 4;
    this.kDistortionParam_DecimationMix = 5;
    this.kDistortionParam_LinearTerm = 6;
    this.kDistortionParam_SquaredTerm = 7;
    this.kDistortionParam_CubicTerm = 8;
    this.kDistortionParam_PolynomialMix = 9;
    this.kDistortionParam_RingModFreq1 = 10;
    this.kDistortionParam_RingModFreq2 = 11;
    this.kDistortionParam_RingModBalance = 12;
    this.kDistortionParam_RingModMix = 13;
    this.kDistortionParam_SoftClipGain = 14;
    this.kDistortionParam_FinalMix = 15;
    this.kRogerBeepParam_InGateThreshold = 0;
    this.kRogerBeepParam_InGateThresholdTime = 1;
    this.kRogerBeepParam_OutGateThreshold = 2;
    this.kRogerBeepParam_OutGateThresholdTime = 3;
    this.kRogerBeepParam_Sensitivity = 4;
    this.kRogerBeepParam_RogerType = 5;
    this.kRogerBeepParam_RogerGain = 6;
    this.kMusicDeviceParam_Tuning = 0;
    this.kMusicDeviceParam_Volume = 1;
    this.kMusicDeviceParam_ReverbVolume = 2;
}

Components.utils.import("resource://gre/modules/ctypes.jsm");
Components.utils.import("resource://osxtypes/CoreAudio.jsm");
Components.utils.import("resource://osxtypes/MacTypes.jsm");
Components.utils.import("resource://osxtypes/CarbonCore.jsm");
Components.utils.import("resource://osxtypes/CoreFoundation.jsm");

const EXPORTED_SYMBOLS = ["AudioUnit", "AUComponent_h", "AudioUnitProperties_h", "AudioCodec_h", "MusicDevice_h", "AudioOutputUnit_h", "AudioComponent_h", "AudioUnitParameters_h"];

function AudioUnit() {
    let libpath = "/System/Library/Frameworks/AudioUnit.framework/AudioUnit";
    let lib = ctypes.open(libpath);
    this.close = function() {
        lib.close();
    };

    AUComponent_h.call(this, lib);
    AudioUnitProperties_h.call(this, lib);
    AudioCodec_h.call(this, lib);
    MusicDevice_h.call(this, lib);
    AudioOutputUnit_h.call(this, lib);
    AudioComponent_h.call(this, lib);
    AudioUnitParameters_h.call(this, lib);
}
